{"version":3,"sources":["img/biscuitsec_logo5.svg","img/biscuitsec_logo.svg","img/biscuitsec.svg","NavBar.js","headinput.js","headinput1.js","HeadInput1_caveat.js","HeadInput_caveat.js","FactParamInput.js","ShowPredicate.js","ShowPredicate_caveat.js","TokenGen.js","HeadInputAttenuation.js","HeadInput1Attenuation.js","FactParamInputAttenuation.js","CaveatInputAttenuation.js","CaveatInput1Attenuation.js","TokenAtt.js","CaveatInput1Verification.js","CaveatInputVerification.js","FactInputVerification.js","TokenVer.js","footer.js","start.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","props","toggleNavbar","bind","state","collapsed","this","setState","classOne","classTwo","mystyle","textAlign","className","aria-current","href","src","require","alt","onClick","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","style","Component","HeadInput","rules","map","val","idx","head_parameter_Id","head_parameter_type_Id","key","label","variant","name","data-id","value","param","selected","disabled","hidden","HeadInput1","ids_parameter_Id","ids_parameter_type_Id","rule_idx","HeadInput1Caveat","caveat_ids_parameter_Id","caveat_ids_parameter_type_Id","caveat_idx","HeadInputCaveat","caveat_head_parameter_Id","caveat_head_parameter_type_Id","FactParamInput","fact_parameter_Id","fact_parameter_type_Id","ShowPredicate","predicates","params","predicate","console","log","i","rule_ids_parameter","length","ids_name","caveat_ids_parameter","toHex","bytes","reduce","str","byte","toString","padStart","fromHex","hexString","Uint8Array","match","parseInt","TokenGen","loadWasm","a","wasm","error","message","handleChange","e","includes","target","head_parameter","dataset","ids_parameter","head_name","caveat_head_parameter","caveat_head_name","caveat_ids_name","fact_head_name","fact_head_parameters","handleChangee","serialized","token","b64","btoa","String","fromCharCode","valueEncoded","valueDecoded","handleChange1","data","atob","split","c","charCodeAt","Biscuit","from","toVec","print","message_encoded","err","handleChange_privateKey","message_privateKey","privkey","pubkey","decoded","keypair","KeyPair","fromBytes","publicKey","toBytes","privateKey","handleChangee_example","token_example","valueEncoded_example","valueDecoded_example","handleChange1_example","message_encoded_example","handleChange2","restrict","handleChange3","resource","handleChange4","resource_verify","handleChange4_example","resource_verify_example","handleChange5_example","restrict_verify_example","handleChange5","restrict_verify","handleChange6","seconds","delPredicate_rule","rule_predicate_deleting","rule_body","SyntaxError","rule_predicate_adding","n","splice","prevState","Promise","r","setTimeout","delPredicate_caveat","caveat_predicate_deleting","caveat_body","caveat_predicate_adding","addPredicate_rule","number_of_added_rules_ids","pas","hidden_msg_predicate","addPredicate_caveat","caveat_hidden_msg_predicate","addFact","number_of_added_fact","addRule1_caveat","number_of_added_caveats_ids","addRule_caveat","number_of_added_caveats_head","addRule1","addRule","number_of_added_rules_head","token_verification","tokenToAttenuate","valueEncodedToAttenuate","valueDecodedToAttenuate","valueEncoded_verification","valueDecoded_verification","privateKey_own_verification","publicKey_own_verification","attenuation_publicKey","attenuation_privateKey","expiration","restrict_operation_message","resource_prefix_message","token_revocation_message","result_verification","gen_err","gen_err_empty","gen_err_example","gen_err_attenuation","result_verification_example","message_encoded_verification","message_encoded_attenuation","message_privateKey_own_verification","message_privateKey_attenuation","copied","body","rule_adding_message","rule_counter","facts","fact_adding_message","fact_counter","caveats","caveat_adding_message","caveat_counter","textArea","select","document","execCommand","loadKeys","btnText","htmlFor","readOnly","rows","onChange","row","head_names","caveat_head_namee","ref","textarea","copy","builder","head_parameter1","pas1","variable","string","symbol","integer","date","Date","parse","body_for_rule","ids_parameters","ids_parameter_for_rule","pas2","ids","rule","addAuthorityRule","fact_parameter1","fact_parameter","fact","addAuthorityFact","addAuthorityCaveat","build","React","HeadInputAttenuation","attenuation_head_parameter_Id","attenuation_head_parameter_type_Id","HeadInput1Attenuation","attenuation_ids_parameter_Id","attenuation_ids_parameter_type_Id","FactParamInputAttenuation","attenuation_fact_parameter_Id","attenuation_fact_parameter_type_Id","CaveatInputAttenuation","attenuation_caveat_head_parameter_Id","attenuation_caveat_head_parameter_type_Id","CaveatInput1Attenuation","attenuation_caveat_ids_parameter_Id","attenuation_caveat_ids_parameter_type_Id","Debugger","attenuation_head_parameter","attenuation_ids_parameter","attenuation_head_name","attenuation_ids_name","attenuation_caveat_head_parameter","attenuation_caveat_ids_parameter","attenuation_caveat_head_name","attenuation_caveat_ids_name","attenuation_fact_head_name","attenuation_fact_head_parameters","handleChangee_attenuation","handleChange1_attenuation","handleChange_privateKey_own_verification","handleChange_attenuation_privateKey","handleChange1_verification","addFactAttenuation","addFactVerification","verification_fact_head_parameters","verification_number_of_added_fact","addRule1_attenuation","attenuation_number_of_added_rules_ids","addRule_attenuation","attenuation_number_of_added_rules_head","addCaveat1Attenuation","attenuation_number_of_added_caveats_ids","addCaveatAttenuation","attenuation_number_of_added_caveats_head","addCaveat1Verification","verification_caveat_ids_parameter","verification_number_of_added_caveats_ids","addCaveatVerification","verification_caveat_head_parameter","verification_number_of_added_caveats_head","attenuation_rules","attenuation_rule_adding_message","attenuation_rule_counter","attenuation_facts","attenuation_fact_adding_message","attenuation_fact_counter","attenuation_number_of_added_fact","attenuation_caveats","attenuation_caveat_adding_message","attenuation_caveat_counter","loadKeys_attenuation","placeholder","block","createBlock","operation","addCaveat","keypair2","token2","append","resourcePrefix","constrained_rule","kind","isNaN","expirationDate","getTime","toFixed","CaveatInput1Verification","Verification_caveat_ids_parameter_Id","Verification_caveat_ids_parameter_type_Id","CaveatInputVerification","Verification_caveat_head_parameter_Id","Verification_caveat_head_parameter_type_Id","FactParamInputVerification","verification_fact_parameter_Id","verification_fact_parameter_type_Id","verification_caveat_head_name","verification_caveat_ids_name","verification_fact_head_name","verification_facts","verification_fact_adding_message","verification_fact_counter","verification_caveats","verification_caveat_adding_message","verification_caveat_counter","verifier","Verifier","addResource","addOperation","setTime","verify","Footer","color","network","url","App","exact","path","component","start","TokenAtt","TokenVer","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0c1cfb4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/biscuitsec_logo5.4d30928f.svg\";","module.exports = __webpack_public_path__ + \"static/media/biscuitsec_logo.b271c757.svg\";","module.exports = __webpack_public_path__ + \"static/media/biscuitsec.82680035.svg\";","import React, { Component } from 'react';\n import { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass NavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n        this.state = {\n            collapsed: true,\n        };\n    }\n    toggleNavbar() {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        });\n    }\n    render() {\n        const collapsed = this.state.collapsed;\n        const classOne = collapsed ? 'collapse navbar-collapse' : 'collapse navbar-collapse show';\n        const classTwo = collapsed ? 'navbar-toggler navbar-toggler-right collapsed' : 'navbar-toggler navbar-toggler-right';\n        const mystyle= collapsed ? {textAlign:\"right\"} : {textAlign:\"left\"};\n        return (\n               \n            <nav className=\"navbar navbar-expand-lg navbar-dark fixed-top\">\n                    <a aria-current=\"page\" className=\"navbar navbar-light  active\" href=\"/\"><img className=\"navbar_logo img-fluid\"\n                        src={require('./img/biscuitsec_logo5.svg')} alt=\"open.acert.io\" /></a>\n                    \n                    <button onClick={this.toggleNavbar} className={`${classTwo}`} type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n                    <div className={`${classOne}`} id=\"navbarResponsive\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item navbar-brand active\">\n                                <Link to=\"/start\">Start</Link>\n\n                            </li>\n                            <li className=\"nav-item navbar-brand active\">\n                                <Link to=\"/tokengen\">Generate</Link>\n\n                            </li>\n                            <li className=\"nav-item navbar-brand active\">\n                                <Link to=\"/tokenatt\">Attenuate</Link>\n                            </li>\n                            <li className=\"nav-item navbar-brand active\">\n                                <Link to=\"/tokenver\">Verify</Link>\n                            </li>\n                            \n                            \n                        </ul>\n                        <li className=\"nav-item navbar-brand active\" style={mystyle}>\n                            <a href=\"https://github.com/acertio/biscuitsec.org\">Github</a>\n                            </li>\n                        \n                    </div>\n            </nav>\n        );\n    }\n}\nexport default NavBar;\n// function NavBar() {\n\n//     return (\n//         // <nav className=\"navbar navbar-expand-lg navbar-light==  fixed-top \" role=\"navigation\">\n//             <a aria-current=\"page\" className=\"navbar navbar-light  active\" href=\"/\"><img className=\"navbar_logo img-fluid\"\n//                 src={require('./img/biscuitsec_logo5.svg')} alt=\"open.acert.io\" /></a>\n\n//         //     {/* <a className=\"navbar-brand1\" >\n//         //         <Link to=\"/debugger\">Debugger</Link>\n//         //     </a> */}\n//         //     <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n//         //         aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n//         //         <span className=\"navbar-toggler-icon\"></span>\n//         //     </button>\n\n//         //     <div className=\"collapse navbar-collapse in\" id=\"navbarSupportedContent\">\n//                 <ul className=\"navbar-nav mr-auto\">\n//                     <li className=\"nav-item navbar-brand active\">\n//                         <Link to=\"/debugger\">Debugger</Link>\n\n//                     </li>\n//                     <li className=\"nav-item navbar-brand active\">\n//                         <Link to=\"/documentation\">Documentation</Link>\n//                     </li>\n//                     <li className=\"nav-item navbar-brand active\">\n//                         <Link to=\"/announcement\">Announcement</Link>\n//                     </li>\n//                 </ul>\n//         //     </div>\n//         // </nav>\n//         // <nav className=\"navbar  navbar-expand-lg navbar-default  navrbar-dark fixed-top navbar-expand-sm  p-0\">\n\n\n//         //     <div className=\"container\">\n\n//         //         <button className=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarNav\"><span className=\"navbar-toggler-icon\"></span> </button>\n//         //         <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n//         //             { <ul className=\"navbar-nav\">\n//         //                 <li className=\"nav-item navbar-brand active\">\n//         //                     <Link to=\"/debugger\">Debugger</Link>\n\n//         //                 </li>\n//         //                 <li className=\"nav-item navbar-brand active\">\n//         //                     <Link to=\"/documentation\">Documentation</Link>\n//         //                 </li>\n//         //                 <li className=\"nav-item navbar-brand active\">\n//         //                     <Link to=\"/announcement\">Announcement</Link>\n//         //                 </li>\n//         //             </ul>\n//         //              }\n//         //         </div>\n//         //     </div>\n//         // </nav>\n\n\n//     );\n\n// }\n// export default NavBar;","import React from \"react\"\n\nconst HeadInput = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let head_parameter_Id = `head_parameter-${idx}`, head_parameter_type_Id = `head_parameter_type-${idx}`;\n\n            return (\n\n\n                <div key={idx} className=\"col-3 ml-2\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`parameter h${idx+1}`}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"head's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={head_parameter_Id}\n                                    data-id={idx}\n                                    id={head_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"head_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2 \">\n                            <div className=\"row\">\n                                <label  >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select \n                                    type=\"text\"\n                                    name={head_parameter_type_Id}\n                                    data-id={idx}\n                                    id={head_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"head_parameter_type form-control\"\n                                >                                           \n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default HeadInput","import React from \"react\"\n\nconst HeadInput1 = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let ids_parameter_Id = `ids_parameter-${idx}`, ids_parameter_type_Id = `ids_parameter_type-${idx}`\n            \n            return (\n\n\n                <div key={idx} className=\"col-3 ml-2 form-group\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`p${props.rule_idx}_${idx+1}`}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"ids's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={ids_parameter_Id}\n                                    data-id={idx}\n                                    id={ids_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"ids_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 ml-2 mr-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={ids_parameter_type_Id}\n                                    data-id={idx}\n                                    id={ids_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"ids_parameter_type form-control\">\n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n            \n            \n        })\n\n    )\n}\nexport default HeadInput1","import React from \"react\"\n\nconst HeadInput1Caveat = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let caveat_ids_parameter_Id = `caveat_ids_parameter-${idx}`, caveat_ids_parameter_type_Id = `caveat_ids_parameter_type-${idx}`\n\n            return (\n\n\n                <div key={idx} className=\"col-3\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`p${props.caveat_idx}_${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"ids's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={caveat_ids_parameter_Id}\n                                    data-id={idx}\n                                    id={caveat_ids_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"caveat_ids_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={caveat_ids_parameter_type_Id}\n                                    data-id={idx}\n                                    id={caveat_ids_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"caveat_ids_parameter_type form-control\">\n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n\n            )\n\n\n           \n\n        \n\n        })\n\n    )\n}\nexport default HeadInput1Caveat","import React from \"react\"\n\nconst HeadInputCaveat = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let caveat_head_parameter_Id = `caveat_head_parameter-${idx}`, caveat_head_parameter_type_Id = `caveat_head_parameter_type-${idx}`;\n            \n            return (\n\n\n                <div key={idx} className=\"col-3\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`parameter h${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"head's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={caveat_head_parameter_Id}\n                                    data-id={idx}\n                                    id={caveat_head_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"caveat_head_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={caveat_head_parameter_type_Id}\n                                    data-id={idx}\n                                    id={caveat_head_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"caveat_head_parameter_type form-control\"\n                                >                                           \n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n        \n        \n\n    )\n}\nexport default HeadInputCaveat","import React from \"react\"\n\nconst FactParamInput = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let fact_parameter_Id = `fact_parameter-${idx}`, fact_parameter_type_Id = `fact_parameter_type-${idx}`;\n\n            return (\n\n\n                <div key={idx} className=\"col-3\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`parameter h${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"fact's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={fact_parameter_Id}\n                                    data-id={idx}\n                                    id={fact_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"fact_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={fact_parameter_type_Id}\n                                    data-id={idx}\n                                    id={fact_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"fact_parameter_type form-control\"\n                                >                                           \n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default FactParamInput","import React from \"react\"\n\nconst ShowPredicate = (props) => {\n    return (\n        props.predicates.map((val, idx) => {\n            let params=\"\";\n            let predicate=props.predicates[idx];\n            console.log(\"predicate\",predicate)\n            for (let i=0;i<predicate.rule_ids_parameter.length;i++)\n            {   if (i===0)\n                    params=params+predicate.rule_ids_parameter[i].param\n                else \n                    params=params+\",\"+predicate.rule_ids_parameter[i].param\n            }\n            return (\n\n\n                <div key={idx} className={\"ml-5\"}>\n\n                    <ul>\n                    <li><div>{`predicate ${idx+1}: ${predicate.ids_name}(${params}) `}</div></li>\n\n                    </ul>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default ShowPredicate","import React from \"react\"\n\nconst ShowPredicate = (props) => {\n    return (\n        props.predicates.map((val, idx) => {\n            let params=\"\";\n            let predicate=props.predicates[idx];\n            console.log(\"predicate\",predicate)\n            for (let i=0;i<predicate.caveat_ids_parameter.length;i++)\n            {   if (i===0)\n                    params=params+predicate.caveat_ids_parameter[i].param\n                else \n                    params=params+\",\"+predicate.caveat_ids_parameter[i].param\n            }\n            return (\n\n\n                <div key={idx} className={\"ml-5\"}>\n\n                    <ul>\n                    <li><div>{`predicate ${idx+1}: ${predicate.ids_name}(${params}) `}</div></li>\n\n                    </ul>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default ShowPredicate","import React from 'react'\nimport HeadInput from \"./headinput\"\nimport HeadInput1 from \"./headinput1\"\nimport HeadInput1Caveat from \"./HeadInput1_caveat\"\nimport HeadInputCaveat from \"./HeadInput_caveat\"\nimport FactParamInput from \"./FactParamInput\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { IconButton } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ShowPredicate from './ShowPredicate'\nimport ShowPredicateCaveat from './ShowPredicate_caveat'\nconst toHex = bytes =>\n    bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hexString =>\n    new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\nclass TokenGen extends React.Component {\n    constructor() {\n        super();\n\n\n        this.state = {\n            token: [], token_example: [], token_verification: [], tokenToAttenuate: [], valueEncoded: '', valueDecoded: '', valueEncodedToAttenuate: '', valueDecodedToAttenuate: '', valueEncoded_example: '', valueEncoded_verification: '', valueDecoded_example: '', valueDecoded_verification: '',\n            privateKey: '', publicKey: '', privateKey_own_verification: '', publicKey_own_verification: '', attenuation_publicKey: '', attenuation_privateKey: '', restrict: '', resource: '',\n            expiration: '', restrict_verify: '', restrict_operation_message: '', resource_prefix_message: '', token_revocation_message: '', restrict_verify_example: '', resource_verify: ''\n            , resource_verify_example: '', seconds: '', result_verification: '', gen_err: '', gen_err_empty: '', gen_err_example: ''\n            , gen_err_attenuation: '', result_verification_example: '', message_encoded_verification: '', message_encoded_example: '',\n            message_encoded_attenuation: '', message_encoded: '', message_privateKey: '', message_privateKey_own_verification: '', \n            message_privateKey_attenuation: '',copied:false,\n            //rule states\n            head_parameter: [{ param: \"\", type: \"\" }], ids_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", ids_name: \"\",\n            rules: [{ head_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", body: [] }],\n            rule_adding_message: \"\", rule_counter: 0, number_of_added_rules_head: 0, number_of_added_rules_ids: 0, rule_body: [], rule_predicate_adding: \"\",\n            rule_idx: 1, hidden_msg_predicate: \"\", rule_predicate_deleting: \"\",\n\n            //fact states\n            fact_head_name: \"\", fact_head_parameters: [{ param: \"\", type: \"\" }],\n            facts: [{ fact_head_parameters: [{ param: \"\", type: \"\" }], fact_head_name: \"\" }],\n            fact_adding_message: \"\", fact_counter: 0, number_of_added_fact: 0,\n            //caveat states\n            caveat_head_parameter: [{ param: \"\", type: \"\" }], caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_head_name: \"\", caveat_ids_name: \"\",\n            caveats: [{ head_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", body: [] }],\n            caveat_adding_message: \"\", caveat_counter: 0, number_of_added_caveats_head: 0, number_of_added_caveats_ids: 0,\n            caveat_body: [], caveat_predicate_adding: \"\", caveat_idx: 1, caveat_hidden_msg_predicate: \"\", caveat_predicate_deleting: \"\",\n\n        }\n\n    }\n    componentDidMount() {\n        this.loadWasm();\n    }\n    // componentDidUpdate(){\n    //     setTimeout(() => this.setState({rule_adding_message:'',caveat_adding_message :'',fact_adding_message:''}), 10000);\n    //   }\n    loadWasm = async () => {\n        try {\n            const wasm = await import(\"biscuit-wasm\");\n\n            this.setState({ wasm, });\n\n        } catch (err) {\n            console.error(`Unexpected error in loadWasm. [Message: ${err.message}]`);\n        }\n    };\n    handleChange = (e) => {\n        if ([\"head_parameter form-control\"].includes(e.target.className)) {\n            let head_parameter = [...this.state.head_parameter]\n            head_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ head_parameter: head_parameter }, () => console.log(this.state.head_parameter))\n        } else if ([\"ids_parameter form-control\"].includes(e.target.className)) {\n            let ids_parameter = [...this.state.ids_parameter]\n            ids_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ ids_parameter: ids_parameter }, () => console.log(this.state.ids_parameter))\n        }\n        else if ([\"ids_parameter_type form-control\"].includes(e.target.className)) {\n\n            let ids_parameter = [...this.state.ids_parameter]\n            ids_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ ids_parameter: ids_parameter }, () => console.log(this.state.ids_parameter))\n        }\n        else if ([\"head_parameter_type form-control\"].includes(e.target.className)) {\n            let head_parameter = [...this.state.head_parameter]\n            head_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ head_parameter: head_parameter }, () => console.log(this.state.head_parameter))\n        }\n        else if ([\"head_name form-control\"].includes(e.target.className)) {\n            this.setState({ head_name: e.target.value }, () => console.log(this.state.head_name))\n\n        }\n\n        else if ([\"ids_name form-control\"].includes(e.target.className)) {\n            this.setState({ ids_name: e.target.value }, () => console.log(this.state.ids_name))\n        }\n\n\n        else if ([\"caveat_head_parameter form-control\"].includes(e.target.className)) {\n            let caveat_head_parameter = [...this.state.caveat_head_parameter]\n            caveat_head_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ caveat_head_parameter: caveat_head_parameter }, () => console.log(this.state.caveat_head_parameter))\n        } else if ([\"caveat_ids_parameter form-control\"].includes(e.target.className)) {\n            let caveat_ids_parameter = [...this.state.caveat_ids_parameter]\n            caveat_ids_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ caveat_ids_parameter: caveat_ids_parameter }, () => console.log(this.state.caveat_ids_parameter))\n        }\n        else if ([\"caveat_ids_parameter_type form-control\"].includes(e.target.className)) {\n\n            let caveat_ids_parameter = [...this.state.caveat_ids_parameter]\n            caveat_ids_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ caveat_ids_parameter: caveat_ids_parameter }, () => console.log(this.state.caveat_ids_parameter))\n        }\n        else if ([\"caveat_head_parameter_type form-control\"].includes(e.target.className)) {\n            let caveat_head_parameter = [...this.state.caveat_head_parameter]\n            caveat_head_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ caveat_head_parameter: caveat_head_parameter }, () => console.log(this.state.caveat_head_parameter))\n        }\n        else if ([\"caveat_head_name form-control\"].includes(e.target.className)) {\n            this.setState({ caveat_head_name: e.target.value }, () => console.log(this.state.caveat_head_name))\n\n        }\n        else if ([\"caveat_ids_name form-control\"].includes(e.target.className)) {\n            this.setState({ caveat_ids_name: e.target.value }, () => console.log(this.state.caveat_ids_name))\n        }\n\n        else if ([\"fact_head_name form-control\"].includes(e.target.className)) {\n            this.setState({ fact_head_name: e.target.value }, () => console.log(this.state.fact_head_name))\n        }\n        else if ([\"fact_parameter form-control\"].includes(e.target.className)) {\n            let fact_head_parameters = [...this.state.fact_head_parameters]\n            fact_head_parameters[e.target.dataset.id].param = e.target.value\n            this.setState({ fact_head_parameters: fact_head_parameters }, () => console.log(this.state.fact_head_parameters))\n        }\n        else if ([\"fact_parameter_type form-control\"].includes(e.target.className)) {\n            let fact_head_parameters = [...this.state.fact_head_parameters]\n            fact_head_parameters[e.target.dataset.id].type = e.target.value\n            this.setState({ fact_head_parameters: fact_head_parameters }, () => console.log(this.state.fact_head_parameters))\n        }\n\n\n    }\n\n    handleChangee = (e) => {\n        let serialized = this.state.token;\n        let b64 = btoa(String.fromCharCode(...serialized));\n\n        this.setState({ valueEncoded: b64, valueDecoded: e.target.value });\n    }\n    copy() {\n        this.setState({copied:true})\n        const el = this.textArea\n        el.select()\n        document.execCommand(\"copy\")\n    }\n    handleChange1 = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token: token.toVec(), valueEncoded: e.target.value, valueDecoded: token.print(), message_encoded: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded: e.target.value })\n            this.setState({ message_encoded: \"Enter a valid token !\" })\n        }\n\n    }\n    handleChange_privateKey = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_privateKey: \"\" })\n\n            let privkey = new Uint8Array(32);\n            let pubkey = new Uint8Array(32);\n            let decoded = fromHex(e.target.value);\n            let keypair = wasm.KeyPair.fromBytes(decoded);\n\n\n            let publicKey = keypair.publicKey();\n\n            keypair.toBytes(privkey);\n            publicKey.toBytes(pubkey);\n\n            this.setState({ privateKey: toHex(privkey), publicKey: toHex(pubkey) });\n        }\n        catch (err) {\n\n            this.setState({ privateKey: e.target.value })\n\n            this.setState({ message_privateKey: \"enter a valid key !\" })\n        }\n    }\n\n    handleChangee_example = (e) => {\n        let serialized = this.state.token_example;\n        let b64 = btoa(String.fromCharCode(...serialized));\n\n        this.setState({ valueEncoded_example: b64, valueDecoded_example: e.target.value });\n    }\n    handleChange1_example = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_encoded_example: \"\" })\n\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token_example: token.toVec(), valueEncoded_example: e.target.value, valueDecoded_example: token.print(), message_encoded_example: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded_example: e.target.value })\n            this.setState({ message_encoded_example: \"Enter a valid token !\" })\n        }\n\n    }\n\n    handleChange2 = (e) => {\n\n\n        this.setState({ restrict: e.target.value });\n    }\n    handleChange3 = (e) => {\n\n\n        this.setState({ resource: e.target.value });\n    }\n\n    handleChange4 = (e) => {\n\n\n        this.setState({ resource_verify: e.target.value });\n    }\n    handleChange4_example = (e) => {\n\n\n        this.setState({ resource_verify_example: e.target.value });\n    }\n\n    handleChange5_example = (e) => {\n\n\n        this.setState({ restrict_verify_example: e.target.value });\n    }\n    handleChange5 = (e) => {\n\n\n        this.setState({ restrict_verify: e.target.value });\n    }\n    handleChange6 = (e) => {\n\n\n        this.setState({ seconds: e.target.value });\n    }\n    delPredicate_rule = async (e) => {\n        this.setState({ rule_predicate_deleting: \"\" })\n        try {\n            console.log(\"in predicate rule body\", this.state.rule_body);\n\n\n            if (this.state.rule_body.length === 0) {\n                throw (SyntaxError(\"You don't have any predicate to delete !\"))\n\n            }\n            else if (this.state.rule_body.length === 1) {\n                this.setState({ rule_body: [], rule_predicate_deleting: \"Your last predicate has been deleted\" , rule_predicate_adding: \"\"})\n            }\n            else {\n                let n = [...this.state.rule_body.splice(this.state.rule_body.length - 1, 1)]\n                console.log(\"in predicate rule body\", n);\n\n                this.setState((prevState) => ({\n\n                    rule_body: [...n], rule_predicate_deleting: \"Your last predicate has been deleted\",rule_predicate_adding: \"\"\n\n                }));\n                await new Promise(r => setTimeout(r, 3000));\n                console.log(\"last rule body\", this.state.rule_body)\n\n            }\n        }\n        catch (e) {\n            this.setState({ rule_predicate_deleting: e.message })\n        }\n    }\n\n    delPredicate_caveat = async (e) => {\n        this.setState({ caveat_predicate_deleting: \"\" })\n        try {\n            console.log(\"in predicate caveat body\", this.state.caveat_body);\n\n\n            if (this.state.caveat_body.length === 0) {\n                throw (SyntaxError(\"You don't have any predicate to delete !\"))\n\n            }\n            else if (this.state.caveat_body.length === 1) {\n                this.setState({ caveat_body: [], caveat_predicate_deleting: \"Your last predicate has been deleted\",caveat_predicate_adding: \"\" })\n            }\n            else {\n                let n = [...this.state.caveat_body.splice(this.state.caveat_body.length - 1, 1)]\n                console.log(\"in predicate caveat body\", n);\n\n                this.setState((prevState) => ({\n\n                    caveat_body: [...n], caveat_predicate_deleting: \"Your last predicate has been deleted\",caveat_predicate_adding: \"\"\n\n                }));\n                await new Promise(r => setTimeout(r, 3000));\n                console.log(\"last caveat body\", this.state.caveat_body)\n\n            }\n        }\n        catch (e) {\n            this.setState({ caveat_predicate_deleting: e.message })\n        }\n    }\n    addPredicate_rule = async (e) => {\n        this.setState({ rule_predicate_adding: \"\" })\n        await new Promise(r => setTimeout(r, 500));\n        console.log(this.state.number_of_added_rules_ids)\n        try {\n            console.log(\"in predicate rule body\", this.state.rule_body);\n\n            for (let pas = 0; pas < this.state.ids_parameter.length; pas++) {\n                console.log(\"ids parameter counter\", this.state.ids_parameter.length)\n                if (this.state.ids_name === \"\" || this.state.ids_parameter[pas].param === \"\" || this.state.ids_parameter[pas].type === \"\") {\n                    throw (SyntaxError(\"all predicate fields must be filled out\"))\n\n                }\n            }\n\n            if (this.state.rule_body.length === 0) {\n                this.setState({\n                    rule_body: [{ ids_name: this.state.ids_name, rule_ids_parameter: this.state.ids_parameter }], ids_name: \"\", ids_parameter: [{ param: \"\", type: \"\" }], rule_predicate_adding: \"your predicate has been added\", rule_idx: this.state.rule_idx + 1, hidden_msg_predicate: \"Your added predicates :\",\n\n                })\n                await new Promise(r => setTimeout(r, 1000));\n\n            }\n            else {\n\n                this.setState((prevState) => ({\n\n                    rule_body: [...this.state.rule_body, { ids_name: this.state.ids_name, rule_ids_parameter: this.state.ids_parameter }], ids_name: \"\", ids_parameter: [{ param: \"\", type: \"\" }], rule_predicate_adding: \"your predicate has been added\", rule_idx: this.state.rule_idx + 1, hidden_msg_predicate: \"Your added predicates :\"\n\n\n                }));\n            }\n        }\n        catch (e) {\n            this.setState({ rule_predicate_adding: e.message })\n        }\n    }\n    addPredicate_caveat = async (e) => {\n        this.setState({ caveat_predicate_adding: \"\" })\n        await new Promise(r => setTimeout(r, 500));\n        try {\n            for (let pas = 0; pas < this.state.caveat_ids_parameter.length; pas++) {\n                if (this.state.caveat_ids_name === \"\" || this.state.caveat_ids_parameter[pas].param === \"\" || this.state.caveat_ids_parameter[pas].type === \"\") {\n                    throw (SyntaxError(\"all predicate fields must be filled out\"))\n\n                }\n            }\n\n            if (this.state.caveat_body.length === 0) {\n                this.setState({\n                    caveat_body: [{ ids_name: this.state.caveat_ids_name, caveat_ids_parameter: this.state.caveat_ids_parameter }], caveat_ids_name: \"\", caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"your predicate has been added\", caveat_idx: this.state.caveat_idx + 1, caveat_hidden_msg_predicate: \"Your added predicates :\"\n\n                })\n                await new Promise(r => setTimeout(r, 1000));\n\n            }\n            else {\n                this.setState((prevState) => ({\n\n                    caveat_body: [...prevState.caveat_body, { ids_name: this.state.caveat_ids_name, caveat_ids_parameter: this.state.caveat_ids_parameter }], caveat_ids_name: \"\", caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"your predicate has been added\", caveat_idx: this.state.caveat_idx + 1, caveat_hidden_msg_predicate: \"Your added predicates :\"\n                }));\n            }\n\n        }\n        catch (e) {\n            this.setState({ caveat_predicate_adding: e.message })\n        }\n    }\n    addFact = async (e) => {\n\n        this.setState((prevState) => ({\n            fact_head_parameters: [...prevState.fact_head_parameters, { param: \"\", type: \"\" }], number_of_added_fact: this.state.number_of_added_fact + 1\n        }));\n\n    }\n    addRule1_caveat = (e) => {\n        this.setState((prevState) => ({\n            caveat_ids_parameter: [...prevState.caveat_ids_parameter, { param: \"\", type: \"\" }], number_of_added_caveats_ids: this.state.number_of_added_caveats_ids + 1,\n        }));\n    }\n    addRule_caveat = (e) => {\n        this.setState((prevState) => ({\n            caveat_head_parameter: [...prevState.caveat_head_parameter, { param: \"\", type: \"\" }], number_of_added_caveats_head: this.state.number_of_added_caveats_head + 1,\n        }));\n    }\n\n    addRule1 = (e) => {\n        this.setState((prevState) => ({\n            ids_parameter: [...prevState.ids_parameter, { param: \"\", type: \"\" }], number_of_added_rules_ids: this.state.number_of_added_rules_ids + 1\n        }));\n    }\n    addRule = (e) => {\n        this.setState((prevState) => ({\n            head_parameter: [...prevState.head_parameter, { param: \"\", type: \"\" }], number_of_added_rules_head: this.state.number_of_added_rules_head + 1\n        }));\n    }\n\n    render() {\n        const { wasm = {} } = this.state;\n        const loadKeys = () => {\n            let decoded = fromHex(this.state.privateKey);\n            return wasm.KeyPair.fromBytes(decoded);\n        }\n        const btnText = this.state.copied ? 'Copied' : 'Copy to clipboard'\n\n\n        let head_parameter = [...this.state.head_parameter]\n        let caveat_head_parameter = [...this.state.caveat_head_parameter]\n        let fact_head_parameters = [...this.state.fact_head_parameters]\n        let ids_parameter = [...this.state.ids_parameter]\n        let caveat_ids_parameter = [...this.state.caveat_ids_parameter]\n\n        return (\n            <div>\n                {/* <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange}/> */}\n                <div className=\"container-fluid\">\n                    <div className=\"warning\">\n                        <div className=\"text-center\">\n                            <strong>Biscuitsec :</strong>\n\n                        Learn how the biscuit token works by interacting with it. For developers, the code of the application is available on our github\n                        </div>\n                    </div>                    <h1 className=\"mr-5 text-center\">Token Generation </h1>\n\n                    <br />\n                    <h2 className=\"mr-5 ml-5\">Root Keys Generation </h2>\n                    <div className=\"mr-5 ml-5\">Biscuits use public key cryptography. You can either use an existing public/private keypair, or we'll generate one for you.<br /> Please note this site does not record neither the provided keys nor the generated tokens. </div>\n                    <br />\n                    <div className=\"container-fluid mt-12\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>Public Key</h5></label> <small> press the button to generate your keys</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea2\" type=\"text\" readOnly value={this.state.publicKey} rows=\"2\" />\n                                </div>\n\n\n\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label className=\"exampleFormControlTextarea1\"><h5>Private Key</h5></label><small> if you wanna use your private key paste it here</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" type=\"text\" value={this.state.privateKey} onChange={this.handleChange_privateKey} rows=\"2\" />\n                                </div>\n                                <button\n                                    onClick={async () => {\n                                        this.setState({ message_privateKey: \"\" })\n\n                                        let privkey = new Uint8Array(32);\n                                        let pubkey = new Uint8Array(32);\n\n                                        let keypair = new wasm.KeyPair();\n                                        let publicKey = keypair.publicKey();\n\n                                        keypair.toBytes(privkey);\n                                        publicKey.toBytes(pubkey);\n\n                                        this.setState({ privateKey: toHex(privkey), publicKey: toHex(pubkey) });\n\n\n\n                                    }}>\n                                    Generate keys\n                                </button>\n                                <div>{this.state.message_privateKey}</div>\n\n                            </div>\n\n                        </div>\n\n                    </div>\n\n\n                    <br />\n                    <h1 className=\"mr-5 ml-5\">Generate Your Own Token </h1>\n                    <div className=\"mr-5 ml-5\">You\"ll now learn how to create the different components (facts, rules, caveats) of a biscuit token, from scratch</div>\n\n                    <br />\n                    <div className=\"container-fluid mt-10\" onChange={this.handleChange}>\n                        <div className=\"row\">\n\n                            <div className=\"col-4 ml-5 mr-5\">\n                                <h2>add a new authority fact</h2>\n\n                            </div>\n                        </div>\n                        <div className=\"ml-5 mr-5\">\n                            Authority facts can only be created in the authority block, either directly or from rules, and are represented by the #authority symbol as the first element of a fact.<br /> <strong>They hold the initial rights for the token</strong> .\n                           <br /> it's a predicate which looks like Predicate(v0, v1, ..., vn) : Predicate si the fact name and v0,v1,...,vn are the fact parameters<br />\n\n                        </div>\n                        <div className=\"row\">\n\n                            <div className=\"col-1 ml-5 mr-2\">\n                                <div className=\"row\">\n                                    <label >{`fact name `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.fact_head_name}\n                                        className=\"fact_head_name form-control\"\n                                        id=\"fact-head-name\"\n                                        row=\"1\"\n\n                                    />\n\n                                </div>\n                            </div>\n\n                            <FactParamInput rules={fact_head_parameters}\n                                type=\"text\"\n\n                            />\n                            <div className=\"col-0 mr-3 \">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\">\n\n                                    <IconButton onClick={this.addFact} >\n                                        < AddCircleIcon />\n                                    </IconButton>\n\n                                </div>\n                            </div>\n\n                        </div>\n\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-0  \">\n                                <button className=\"col-12\" onClick={async () => {\n                                    try {\n\n                                        this.setState({ fact_adding_message: '' });\n                                        for (let pas = 0; pas < this.state.fact_head_parameters.length; pas++) {\n                                            if (this.state.fact_head_name === \"\" || this.state.fact_head_parameters[pas].param === \"\" || this.state.fact_head_parameters[pas].type === \"\") {\n                                                throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                            }\n                                        }\n                                        if (this.state.fact_counter === 0) {\n                                            console.log(\"number of facts\", this.state.number_of_added_fact);\n                                           \n\n                                            this.setState({\n                                                facts: [{ fact_head_parameters: this.state.fact_head_parameters, fact_head_name: this.state.fact_head_name, }]\n                                            });\n                                        }\n                                        else {\n                                            \n                                            this.setState((prevState) => ({\n                                                facts: [...prevState.facts, { fact_head_parameters: this.state.fact_head_parameters, fact_head_name: this.state.fact_head_name, }]\n                                            }));\n\n                                        }\n                                        this.setState({ fact_head_name: \"\", fact_head_parameters: [{ param: \"\", type: \"\" }] })\n\n                                        this.setState({ fact_adding_message: \"Your new fact has been added\" });\n\n                                        this.setState({ fact_counter: this.state.fact_counter + 1 })\n\n                                    }\n                                    catch (e) {\n\n                                        this.setState({ fact_adding_message: e.message })\n\n                                    }\n\n                                }}>Add fact</button>\n                            </div>\n                            <div className=\"col-2 ml-3\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        this.setState({\n\n\n\n                                            fact_head_name: \"\", fact_head_parameters: [{ param: \"\", type: \"\" }],\n                                            \n                                            fact_adding_message: \"\", \n                                        })\n\n\n\n\n\n                                    }}>Reset fact</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-2 mr-2 \">\n                                <div id=\"fact_adding_result\">{this.state.fact_adding_message}</div>\n\n                            </div>\n                        </div>\n                        <br />\n                        <div className=\"row\">\n\n                            <div className=\"col-3 ml-5 mr-5\">\n                                <h2>Add a new rule</h2>\n\n                            </div>\n\n                        </div>\n                        <div className=\"ml-5 mr-5\">A rule is a comination of predicates pid1 ,pid2 ,etc.that will generate a new fact corresponding to the head.</div>\n                        <div className=\"mr-5 ml-5\">The rule looks like this (with a head part on the left and a body part on the right) :  <pre>{'head(h1,h2,...) <- pid1(p1_1,p1_2...), pid2(p2_1,p2_2, ...)'}</pre> </div>\n\n\n                        <div className=\"ml-5\">For more details and some explained examples of rules click <a href=\"https://www.w3schools.com/\">here</a> to check our documentation</div>\n\n                        <br />\n\n\n                        <div className=\"ml-5\"><h3>Header (left part of the rule)</h3></div>\n                        <div className=\"ml-5\">The header is a Predicate composed from a name ( head ) and  some parameters (at least h1).</div>\n                        <div className=\"ml-5\"> The + allows you to add other parameters (h2,h3,etc.)</div>\n                        <div className=\"row\"></div>\n                        <div className=\"row\">\n\n                            <div className=\"col-1 ml-5 mr-2 \">\n                                <div className=\"row\">\n                                    <label >{`head name `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.head_name}\n                                        className=\"head_name form-control\"\n                                        id=\"head-name\"\n                                        row=\"1\"\n\n                                    />\n\n                                </div>\n                            </div>\n\n                            <HeadInput rules={head_parameter}\n                                type=\"text\"\n\n                            />\n                            <div className=\"col-0 mr-3 \">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\">\n\n                                    <IconButton onClick={this.addRule} >\n                                        < AddCircleIcon />\n                                    </IconButton>\n\n                                </div>\n                            </div>\n                        </div>\n\n                        <br />\n                        <div className=\"ml-5\"><h3>Body : the part on the left</h3></div>\n                        <div className=\"ml-5\">The body may be decomposed into several predicates(pid1,pid2,etc).</div>\n                        <div className=\"ml-5\">Each body predicate is composed of its identifier id (e.g. pid1) and one or several parameters (e.g. p1_1).</div>\n                        <div className=\"ml-5\">Click <a href=\"https://www.w3schools.com/\">here</a> for more details and explained examples.</div>\n\n                        <div className=\"ml-5\">You may either add a parameter (e.g. p1_2) with the button + , or add a new body predicate (e.g. pid2 ) using the \"add predicate\" button.</div>\n                        <h5 className=\"ml-5\">{this.state.hidden_msg_predicate}</h5>\n\n                        <ShowPredicate predicates={this.state.rule_body} />\n\n                        <div className=\"row\">\n                            <div className=\"col-1 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`pid${this.state.rule_idx} `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea id=\"outlined-basic\" label=\"ids\" variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.ids_name}\n                                        className=\"ids_name form-control\"\n                                    />\n\n                                </div>\n                            </div>\n\n                            <HeadInput1 rules={ids_parameter} rule_idx={this.state.rule_idx}\n                                type=\"text\"\n                                value={this.state.ids_parameter}\n                                className=\"ids_parameter\"\n\n\n                            />\n                            <div className=\"col-0 mr-2\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n                                    <h3>\n                                        <IconButton onClick={this.addRule1} >\n                                            < AddCircleIcon />\n                                        </IconButton>\n                                    </h3>\n\n\n                                </div>\n                            </div>\n\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n                                    <button onClick={this.addPredicate_rule} >\n                                        Add predicate\n                                        </button>\n                                    <div>{this.state.rule_predicate_adding}</div>\n\n\n\n\n\n                                </div>\n                            </div>\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n\n                                    <button onClick={this.delPredicate_rule} >\n                                        Delete last predicate\n                                    </button>\n                                    <div>{this.state.rule_predicate_deleting}</div>\n\n\n\n\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n                            <div className=\"col-0 ml-1\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        try {\n                                            this.setState({ rule_adding_message: '' })\n                                            for (let pas = 0; pas < this.state.head_parameter.length; pas++) {\n                                                if (this.state.head_name === \"\" || this.state.head_parameter[pas].param === \"\" || this.state.head_parameter[pas].type === \"\") {\n                                                    throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                                }\n                                            }\n\n                                            if (this.state.rule_counter === 0) {\n\n                                                if (this.state.rule_body.length === 0) {\n                                                    throw (SyntaxError(\"You must at least add one predicate\"))\n                                                }\n\n                                                this.setState({\n                                                    rules: [{ head_parameter: this.state.head_parameter, head_name: this.state.head_name, body: this.state.rule_body }]\n                                                });\n                                            }\n                                            else {\n\n                                                if (this.state.rule_body.length === 0) {\n                                                    throw (SyntaxError(\"You must at least add one predicate !\"))\n                                                }\n\n\n\n                                                this.setState((prevState) => ({\n                                                    rules: [...prevState.rules, { head_parameter: this.state.head_parameter, head_name: this.state.head_name, body: this.state.rule_body }]\n                                                }));\n                                            }\n\n                                            this.setState({ rule_adding_message: \"Your new rule has been added\", });\n                                            this.setState({ rule_predicate_adding: '' });\n                                            this.setState({ rule_counter: this.state.rule_counter + 1 })\n                                            this.setState({ head_parameter: [{ param: \"\", type: \"\" }], head_name: '', rule_idx: 1, body: [], rule_body: [] })\n\n\n                                        }\n                                        catch (e) {\n                                            this.setState({ rule_adding_message: e.message })\n                                        }\n\n\n\n\n\n                                    }}>Add rule</button>\n                                </div>\n                            </div>\n                            <div className=\"col-2 ml-3\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        this.setState({\n\n\n\n                                            head_parameter: [{ param: \"\", type: \"\" }], ids_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", ids_name: \"\",\n\n                                            rule_adding_message: \"Your rule has been resetted \", rule_body: [], rule_predicate_adding: \"\", rule_idx: 1, hidden_msg_predicate: \"\", rule_predicate_deleting: \"\",\n\n                                        })\n\n\n\n\n\n                                    }}>Reset rule</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-2 mr-2 \">\n                                <div id=\"rule_adding_result\">{this.state.rule_adding_message}</div>\n\n                            </div>\n                        </div>\n\n                    </div>\n                    <br />\n                    <div className=\"container-fluid mt-10\" onChange={this.handleChange}>\n\n                        <div className=\"row\">\n\n                            <div className=\"col-3 ml-5 mr-5\">\n                                <h2>Add a new caveat</h2>\n\n                            </div>\n\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"mr-5 ml-5\">Caveats are logic queries evaluating conditions on authority and ambient facts. To validate an operation, all of a token's caveats must succeed.</div>\n                            <div className=\"mr-5 ml-5\">The caveat have the same structure as the rule.</div>\n\n                        </div>\n                        <br />\n                        <div className=\"ml-5\"><h4>Header</h4></div>\n\n                        <div className=\"row\">\n\n                            <div className=\"col-1 mr-2 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`head name `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.caveat_head_name}\n                                        className=\"caveat_head_name form-control\"\n                                        id=\"head-name\"\n                                        row=\"1\"\n\n                                    />\n\n                                </div>\n                            </div>\n\n                            <HeadInputCaveat rules={caveat_head_parameter} head_names={this.state.caveat_head_namee}\n                                type=\"text\"\n\n                            />\n                            <div className=\"col-0 mr-3 \">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row ml-1\">\n\n                                    <IconButton onClick={this.addRule_caveat} >\n                                        < AddCircleIcon />\n                                    </IconButton>\n\n                                </div>\n                            </div>\n                        </div>\n                        <br />\n                        <div className=\"ml-5\"><h4>Body</h4></div>\n                        <h5 className=\"ml-5\">{this.state.caveat_hidden_msg_predicate}</h5>\n\n                        <ShowPredicateCaveat predicates={this.state.caveat_body} />\n\n                        <div className=\"row \">\n                            <div className=\"col-1 mr-2 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`pid${this.state.caveat_idx} `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea id=\"outlined-basic\" label=\"ids\" variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.caveat_ids_name}\n                                        className=\"caveat_ids_name form-control\"\n                                    />\n\n                                </div>\n                            </div>\n\n                            <HeadInput1Caveat rules={caveat_ids_parameter} caveat_idx={this.state.caveat_idx}\n                                head_names={this.state.caveat_head_namee}\n                                type=\"text\"\n                                value={this.state.ids_parameter}\n                                className=\"caveat_ids_parameter\"\n\n\n                            />\n                            <div className=\"col-0 mr-3\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row ml-1\" >\n                                    <h3>\n                                        <IconButton onClick={this.addRule1_caveat} >\n                                            < AddCircleIcon />\n                                        </IconButton>\n                                    </h3>\n\n\n                                </div>\n                            </div>\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n                                    <button onClick={this.addPredicate_caveat} >\n                                        Add predicate\n                                        </button>\n                                    <div>{this.state.caveat_predicate_adding}</div>\n\n\n\n                                </div>\n                            </div>\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n\n                                    <button onClick={this.delPredicate_caveat} >\n                                        Delete last predicate\n                                    </button>\n                                    <div>{this.state.caveat_predicate_deleting}</div>\n\n\n\n\n                                </div>\n                            </div>\n                        </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-0 \">\n                                <button onClick={async () => {\n                                    try {\n                                        this.setState({ caveat_adding_message: '' })\n                                        for (let pas = 0; pas < this.state.caveat_head_parameter.length; pas++) {\n                                            if (this.state.caveat_head_name === \"\" || this.state.caveat_head_parameter[pas].param === \"\" || this.state.caveat_head_parameter[pas].type === \"\") {\n                                                throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                            }\n                                        }\n                                        if (this.state.caveat_counter === 0) {\n\n\n                                            if (this.state.caveat_body.length === 0) {\n                                                throw (SyntaxError(\"You must at least add one predicate !\"))\n                                            }\n                                            // for (let pas = 0; pas < this.state.number_of_added_caveats_ids + 1; pas++) {\n                                            //     if (this.state.caveat_ids_name === \"\" || this.state.caveat_ids_parameter[pas].param === \"\" || this.state.caveat_ids_parameter[pas].type === \"\") {\n                                            //         throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                            //     }\n                                            // }\n                                            console.log(this.state.head_name);\n                                            this.setState({\n                                                caveats: [{ head_parameter: this.state.caveat_head_parameter, head_name: this.state.caveat_head_name, body: this.state.caveat_body }]\n                                            });\n                                            await new Promise(r => setTimeout(r, 2000));\n                                            console.log(\"caveats\", this.state.caveats);\n                                        }\n                                        else {\n                                            console.log(\"here\", this.state.number_of_added_caveats_head)\n\n\n                                            if (this.state.caveat_body.length === 0) {\n                                                throw (SyntaxError(\"You must at least add one predicate !\"))\n                                            }\n                                            // for (let pas = 1; pas <= this.state.number_of_added_caveats_ids; pas++) {\n                                            //     if (this.state.caveat_ids_name === \"\" || this.state.caveat_ids_parameter[this.state.caveat_ids_parameter.length - pas].param === \"\" || this.state.caveat_ids_parameter[this.state.caveat_ids_parameter.length - pas].type === \"\") {\n                                            //         throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                            //     }\n                                            // }\n\n\n\n                                            this.setState((prevState) => ({\n                                                caveats: [...prevState.caveats, { head_parameter: this.state.caveat_head_parameter, head_name: this.state.caveat_head_name, body: this.state.caveat_body }]\n                                            }));\n                                            await new Promise(r => setTimeout(r, 2000));\n                                            console.log(\"caveats\", this.state.caveats);\n                                        }\n                                        this.setState({ caveat_adding_message: \"Your new ceveat has been added\" });\n\n                                        this.setState({ caveat_counter: this.state.rule_counter + 1 })\n                                        this.setState({ caveat_head_name: \"\", caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_head_parameter: [{ param: \"\", type: \"\" }], caveat_ids_name: \"\" })\n                                        this.setState({ caveat_head_name: \"\", caveat_head_parameter: [{ param: \"\", type: \"\" }], caveat_idx: 1, body: [], caveat_body: [] })\n                                    }\n                                    catch (e) {\n                                        this.setState({ caveat_adding_message: e.message })\n                                    }\n\n\n                                }}>Add caveat</button>\n                            </div>\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        this.setState({\n\n                                            caveat_head_parameter: [{ param: \"\", type: \"\" }], caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_head_name: \"\", caveat_ids_name: \"\",\n                                            caveat_adding_message: \"\", number_of_added_caveats_head: 0, number_of_added_caveats_ids: 0,\n                                            caveat_body: [], caveat_predicate_adding: \"\", caveat_idx: 1, caveat_hidden_msg_predicate: \"\", caveat_predicate_deleting: \"\",\n\n\n\n                                        })\n\n\n\n\n\n                                    }}>Reset caveat</button>\n                                </div>\n                            </div>\n\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-2 mr-2 \">\n                                <div id=\"caveat_adding_result\">{this.state.caveat_adding_message}</div>\n\n                            </div>\n                        </div>\n\n                        <br /> <br />\n                        <br />\n                        <div className=\"container-fluid mt-10\">\n                            <div className=\"row\">\n                                <div className=\"col-md-5 ml-5\">\n                                    <div className=\"textarea-container\">\n                                        <label htmlFor=\"exampleFormControlTextarea2\"><h5>ENCODED</h5></label> <small> paste a token here</small>\n                                        <textarea ref={(textarea) => this.textArea = textarea} className=\"form-control\" id=\"exampleFormControlTextarea2\" type=\"text\" value={this.state.valueEncoded} onChange={this.handleChange1} rows=\"15\" />\n                                        <a onClick={() => this.copy()}>{btnText}</a>\n\n                                    </div>\n                                    <div>{this.state.message_encoded}</div>\n                                </div>\n                                <div className=\"col-md-5 ml-5\">\n                                    <div className=\"form-group brown-border-focus\">\n                                        <label htmlFor=\"exampleFormControlTextarea1\"><h5>DECODED</h5></label><small> your result</small>\n                                        <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" readOnly type=\"text\" value={this.state.valueDecoded} onChange={this.handleChangee} rows=\"15\" />\n                                    </div>\n\n\n                                    <div id=\"generation_result\">{this.state.gen_err_empty}</div>\n\n\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"mr-5 ml-5\">In order to create your first token add your rules , fact and caveat , then click on the generate button</div>\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-4\">\n\n                            </div>\n                            <div className=\"col-2 ml-5\">\n                                <button onClick={async () => {\n                                    this.setState({ gen_err: '' })\n\n                                    let builder = new wasm.Biscuit();\n                                    console.log(\"rule counter :\", this.state.rule_counter);\n                                    if (this.state.rule_counter > 0) {\n\n                                        for (let pas = 0; pas < this.state.rules.length; pas++) {\n                                            console.log(\"step {}\", pas);\n                                            let head_parameter1 = [...this.state.rules[pas].head_parameter];\n                                            let head_parameter = [];\n                                            for (let pas1 = 0; pas1 < head_parameter1.length; pas1++) {\n                                                if (head_parameter1[pas1].type === \"variable\") {\n                                                    head_parameter = [...head_parameter, { variable: parseInt(head_parameter1[pas1].param) }]\n                                                }\n                                                else if (head_parameter1[pas1].type === \"string\") {\n                                                    head_parameter = [...head_parameter, { string: head_parameter1[pas1].param }]\n                                                }\n                                                else if (head_parameter1[pas1].type === \"symbol\") {\n                                                    head_parameter = [...head_parameter, { symbol: head_parameter1[pas1].param }]\n                                                }\n                                                else if (head_parameter1[pas1].type === \"integer\") {\n                                                    head_parameter = [...head_parameter, { integer : parseInt(head_parameter1[pas1].param) }]\n                                                }\n                                                else if (head_parameter1[pas1].type === \"date\") {\n                                                    head_parameter = [...head_parameter, { date : Date.parse(head_parameter1[pas1].param) }]\n                                                }\n\n                                            }\n                                            // console.log(head_parameter)\n                                            let body = [...this.state.rules[pas].body];\n                                            let body_for_rule = [];\n                                            for (let pas1 = 0; pas1 < body.length; pas1++) {\n                                                let ids_name = body[pas1].ids_name\n                                                let ids_parameters = [...body[pas1].rule_ids_parameter]\n                                                let ids_parameter_for_rule = []\n                                                for (let pas2 = 0; pas2 < ids_parameters.length; pas2++) {\n                                                    if (ids_parameters[pas2].type === \"variable\") {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { variable: parseInt(ids_parameters[pas2].param) }]\n                                                    }\n                                                    else if (ids_parameters[pas2].type === \"string\") {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { string: ids_parameters[pas2].param }]\n                                                    }\n                                                    else if (ids_parameters[pas2].type === \"symbol\") {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { symbol: ids_parameters[pas2].param }]\n                                                    }\n                                                    else if (ids_parameters[pas2].type === \"integer\") {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { integer: parseInt(ids_parameters[pas2].param) }]\n                                                    }\n                                                    else if (ids_parameters[pas2].type === \"date\") {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { date : Date.parse(ids_parameters[pas2].param) }]\n                                                    }\n                                                }\n                                                body_for_rule = [...body_for_rule, {\n                                                    name: ids_name,\n                                                    ids: ids_parameter_for_rule\n                                                }]\n                                            }\n                                            console.log(\"body_for_rule\", body_for_rule);\n\n\n                                            let rule = wasm.rule(\n                                                this.state.rules[pas].head_name,\n                                                head_parameter,\n                                                body_for_rule\n                                            )\n                                            console.log(\"authority rule \", rule)\n                                            builder.addAuthorityRule(rule);\n                                        }\n                                    }\n                                    console.log(\"fact counter :\", this.state.fact_counter);\n                                    if (this.state.fact_counter > 0) {\n                                        for (let pas = 0; pas < this.state.facts.length; pas++) {\n\n                                            let fact_parameter1 = [...this.state.facts[pas].fact_head_parameters];\n                                            let fact_parameter = [];\n                                            for (let pas1 = 0; pas1 < fact_parameter1.length; pas1++) {\n                                                if (fact_parameter1[pas1].type === \"variable\") {\n                                                    fact_parameter = [...fact_parameter, { variable: parseInt(fact_parameter1[pas1].param) }]\n                                                }\n                                                else if (fact_parameter1[pas1].type === \"string\") {\n                                                    fact_parameter = [...fact_parameter, { string: fact_parameter1[pas1].param }]\n                                                }\n                                                else if (fact_parameter1[pas1].type === \"symbol\") {\n                                                    fact_parameter = [...fact_parameter, { symbol: fact_parameter1[pas1].param }]\n                                                }\n                                                else if (fact_parameter1[pas1].type === \"date\") {\n                                                    fact_parameter = [...fact_parameter, { date : Date.parse(fact_parameter1[pas1].param) }]\n                                                }\n                                                else if (fact_parameter1[pas1].type === \"integer\") {\n                                                    fact_parameter = [...fact_parameter, { integer : parseInt(fact_parameter1[pas1].param) }]\n                                                }\n                                            }\n                                            let fact = wasm.fact(\n                                                this.state.facts[pas].fact_head_name,\n                                                fact_parameter,\n\n                                            )\n                                            builder.addAuthorityFact(fact);\n\n\n                                        }\n\n                                    }\n                                    console.log(\"caveat counter :\", this.state.caveat_counter);\n                                    if (this.state.caveat_counter > 0) {\n                                        for (let pas = 0; pas < this.state.caveats.length; pas++) {\n                                            console.log(\"step {}\", pas);\n                                            let head_parameter1 = [...this.state.caveats[pas].head_parameter];\n                                            let head_parameter = [];\n                                            for (let pas1 = 0; pas1 < head_parameter1.length; pas1++) {\n                                                if (head_parameter1[pas1].type === \"variable\") {\n                                                    head_parameter = [...head_parameter, { variable: parseInt(head_parameter1[pas1].param) }]\n                                                }\n                                                else if (head_parameter1[pas1].type === \"string\") {\n                                                    head_parameter = [...head_parameter, { string: head_parameter1[pas1].param }]\n                                                }\n                                                else if (head_parameter1[pas1].type === \"symbol\") {\n                                                    head_parameter = [...head_parameter, { symbol: head_parameter1[pas1].param }]\n                                                }\n                                                else if (head_parameter1[pas1].type === \"date\") {\n                                                    head_parameter = [...head_parameter, { date: Date.parse(head_parameter1[pas1].param) }]\n                                                }\n                                                else if (head_parameter1[pas1].type === \"integer\") {\n                                                    head_parameter = [...head_parameter, { integer: parseInt(head_parameter1[pas1].param) }]\n                                                }\n                                                \n                                            }\n                                            // console.log(head_parameter)\n                                            let body = [...this.state.caveats[pas].body];\n                                            let body_for_rule = [];\n                                            for (let pas1 = 0; pas1 < body.length; pas1++) {\n                                                let ids_name = body[pas1].ids_name\n                                                let ids_parameters = [...body[pas1].caveat_ids_parameter]\n                                                let ids_parameter_for_rule = []\n                                                for (let pas2 = 0; pas2 < ids_parameters.length; pas2++) {\n                                                    if (ids_parameters[pas2].type === \"variable\") {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { variable: parseInt(ids_parameters[pas2].param) }]\n                                                    }\n                                                    else if (ids_parameters[pas2].type === \"string\") {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { string: ids_parameters[pas2].param }]\n                                                    }\n                                                    else if (ids_parameters[pas2].type === \"symbol\") {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { symbol: ids_parameters[pas2].param }]\n                                                    }\n                                                    else if(ids_parameters[pas2].type === \"date\")\n                                                    {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { date : Date.parse(ids_parameters[pas2].param)  }]\n\n                                                    }\n                                                    else if(ids_parameters[pas2].type === \"integer\")\n                                                    {\n                                                        ids_parameter_for_rule = [...ids_parameter_for_rule, { integer : parseInt(ids_parameters[pas2].param) }]\n\n                                                    }\n                                                }\n                                                body_for_rule = [...body_for_rule, {\n                                                    name: ids_name,\n                                                    ids: ids_parameter_for_rule\n                                                }]\n                                            }\n                                            console.log(\"body_for_rule\", body_for_rule);\n\n\n                                            let rule = wasm.rule(\n                                                this.state.caveats[pas].head_name,\n                                                head_parameter,\n                                                body_for_rule\n                                            )\n                                            builder.addAuthorityCaveat(rule);\n                                        }\n                                    }\n\n\n\n\n                                    try {\n                                        let token = builder.build(loadKeys())\n                                        let serialized = token.toVec();\n                                        let b64 = btoa(String.fromCharCode(...serialized));\n\n                                        this.setState({ token: token.toVec(), valueEncoded: b64, valueDecoded: token.print() });\n                                        this.setState({\n                                            //rule states\n                                            head_parameter: [{ param: \"\", type: \"\" }], ids_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", ids_name: \"\",\n                                            rules: [{ head_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", body: [] }],\n                                            rule_adding_message: \"\", rule_counter: 0, number_of_added_rules_head: 0, number_of_added_rules_ids: 0, rule_body: [], rule_predicate_adding: \"\", rule_idx: 1,\n\n                                            //fact states\n                                            fact_head_name: \"\", fact_head_parameters: [{ param: \"\", type: \"\" }],\n                                            facts: [{ fact_head_parameters: [{ param: \"\", type: \"\" }], fact_head_name: \"\" }],\n                                            fact_adding_message: \"\", fact_counter: 0, number_of_added_fact: 0,\n                                            //caveat states\n                                            caveat_head_parameter: [{ param: \"\", type: \"\" }], caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_head_name: \"\", caveat_ids_name: \"\",\n                                            caveats: [{ head_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", body: [] }],\n                                            caveat_adding_message: \"\", caveat_counter: 0, number_of_added_caveats_head: 0, number_of_added_caveats_ids: 0,\n                                            caveat_body: [], caveat_predicate_adding: \"\", caveat_idx: 1,\n                                        })\n                                    } catch (error) {\n                                        this.setState({ gen_err: \"You must generate your keypair before generating your token !\" });\n                                    }\n\n                                }}\n\n                                > Generate your new token </button>\n                                <div id=\"verification_result\">{this.state.gen_err}</div>\n\n                            </div>\n                        </div>\n                    </div>\n\n\n\n\n\n\n\n                </div >\n            </div>\n        )\n    }\n}\nexport default TokenGen;\n\n\n","import React from \"react\"\n\nconst HeadInputAttenuation = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let attenuation_head_parameter_Id = `attenuation_head_parameter-${idx}`, attenuation_head_parameter_type_Id = `attenuation_head_parameter_type-${idx}`;\n\n            return (\n\n\n                <div key={idx} className=\"col-3\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`parameter h${idx+1}`}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"head's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={attenuation_head_parameter_Id}\n                                    data-id={idx}\n                                    id={attenuation_head_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"attenuation_head_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={attenuation_head_parameter_type_Id}\n                                    data-id={idx}\n                                    id={attenuation_head_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"attenuation_head_parameter_type form-control\"\n                                >                                           \n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default HeadInputAttenuation","import React from \"react\"\n\nconst HeadInput1Attenuation = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let attenuation_ids_parameter_Id = `attenuation_ids_parameter-${idx}`, attenuation_ids_parameter_type_Id = `attenuation_ids_parameter_type-${idx}`\n            return (\n\n\n                <div key={idx} className=\"col-3 ml-2\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`p${props.rule_idx}_${idx+1}`}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"ids's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={attenuation_ids_parameter_Id}\n                                    data-id={idx}\n                                    id={attenuation_ids_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"attenuation_ids_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={attenuation_ids_parameter_type_Id}\n                                    data-id={idx}\n                                    id={attenuation_ids_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"attenuation_ids_parameter_type form-control\">\n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default HeadInput1Attenuation","import React from \"react\"\n\nconst FactParamInputAttenuation = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let attenuation_fact_parameter_Id = `attenuation_fact_parameter-${idx}`, attenuation_fact_parameter_type_Id = `attenuation_fact_parameter_type-${idx}`;\n\n            return (\n\n\n                <div key={idx} className=\"col-3\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`parameter h${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"fact's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={attenuation_fact_parameter_Id}\n                                    data-id={idx}\n                                    id={attenuation_fact_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"attenuation_fact_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={attenuation_fact_parameter_type_Id}\n                                    data-id={idx}\n                                    id={attenuation_fact_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"attenuation_fact_parameter_type form-control\"\n                                >                                           \n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default FactParamInputAttenuation","import React from \"react\"\n\nconst CaveatInputAttenuation = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let attenuation_caveat_head_parameter_Id = `attenuation_caveat_head_parameter-${idx}`, attenuation_caveat_head_parameter_type_Id = `attenuation_caveat_head_parameter_type-${idx}`;\n\n            return (\n\n\n                <div key={idx} className=\"col-3\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`parameter h${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"head's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={attenuation_caveat_head_parameter_Id}\n                                    data-id={idx}\n                                    id={attenuation_caveat_head_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"attenuation_caveat_head_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={attenuation_caveat_head_parameter_type_Id}\n                                    data-id={idx}\n                                    id={attenuation_caveat_head_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"attenuation_caveat_head_parameter_type form-control\"\n                                >                                           \n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default CaveatInputAttenuation","import React from \"react\"\n\nconst CaveatInput1Attenuation = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let attenuation_caveat_ids_parameter_Id = `attenuation_caveat_ids_parameter-${idx}`, attenuation_caveat_ids_parameter_type_Id = `attenuation_caveat_ids_parameter_type-${idx}`\n            return (\n\n\n                <div key={idx} className=\"col-3 ml-2\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`p${props.caveat_idx}_${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"ids's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={attenuation_caveat_ids_parameter_Id}\n                                    data-id={idx}\n                                    id={attenuation_caveat_ids_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"attenuation_caveat_ids_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={attenuation_caveat_ids_parameter_type_Id}\n                                    data-id={idx}\n                                    id={attenuation_caveat_ids_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"attenuation_caveat_ids_parameter_type form-control\">\n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default CaveatInput1Attenuation","import React from 'react'\n\nimport HeadInputAttenuation from \"./HeadInputAttenuation\"\nimport HeadInput1Attenuation from \"./HeadInput1Attenuation\"\nimport FactParamInputAttenuation from \"./FactParamInputAttenuation\"\nimport CaveatInputAttenuation from \"./CaveatInputAttenuation\";\nimport CaveatInput1Attenuation from \"./CaveatInput1Attenuation\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { IconButton } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport ShowPredicate from './ShowPredicate'\nimport ShowPredicateCaveat from './ShowPredicate_caveat'\nconst toHex = bytes =>\n    bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hexString =>\n    new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\nclass Debugger extends React.Component {\n    constructor() {\n        super();\n\n\n        this.state = {\n            token: [], token_example: [], token_verification: [], tokenToAttenuate: [], valueEncoded: '', valueDecoded: '', valueEncodedToAttenuate: '', valueDecodedToAttenuate: '', valueEncoded_example: '', valueEncoded_verification: '', valueDecoded_example: '', valueDecoded_verification: '',\n            privateKey: '', publicKey: '', privateKey_own_verification: '', publicKey_own_verification: '', attenuation_publicKey: '', attenuation_privateKey: '', restrict: '', resource: '',\n            expiration: '', restrict_verify: '', restrict_operation_message: '', resource_prefix_message: '', token_revocation_message: '', restrict_verify_example: '', resource_verify: ''\n            , resource_verify_example: '', seconds: '', result_verification: '', gen_err: '', gen_err_empty: '', gen_err_example: ''\n            , gen_err_attenuation: '', result_verification_example: '', message_encoded_verification: '', message_encoded_example: '',\n            message_encoded_attenuation: '', message_encoded: '', message_privateKey: '', message_privateKey_own_verification: '', message_privateKey_attenuation: '', copied:false,\n            //rule attenuation states\n            attenuation_head_parameter: [{ param: \"\", type: \"\" }], attenuation_ids_parameter: [{ param: \"\", type: \"\" }], attenuation_head_name: \"\", attenuation_ids_name: \"\",\n            attenuation_rules: [{ head_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", body: [] }],\n            attenuation_rule_adding_message: \"\", attenuation_rule_counter: 0,\n            attenuation_number_of_added_rules_head: 0, attenuation_number_of_added_rules_ids: 0, rule_body: [],\n            rule_predicate_adding: \"\", rule_idx: 1, rule_predicate_deleting: \"\",\n            //fact attenuation states\n            attenuation_fact_head_name: \"\", attenuation_fact_head_parameters: [{ param: \"\", type: \"\" }],\n            attenuation_facts: [{ fact_head_parameters: [{ param: \"\", type: \"\" }], fact_head_name: \"\" }],\n            attenuation_fact_adding_message: \"\", attenuation_fact_counter: 0, attenuation_number_of_added_fact: 0,\n            //caveat attenuation states\n            attenuation_caveat_head_parameter: [{ param: \"\", type: \"\" }], attenuation_caveat_ids_parameter: [{ param: \"\", type: \"\" }], attenuation_caveat_head_name: \"\", attenuation_caveat_ids_name: \"\",\n            attenuation_caveats: [{ head_parameter: [{ param: \"\", type: \"\" }], ids_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", ids_name: \"\" }],\n            attenuation_caveat_adding_message: \"\", attenuation_caveat_counter: 0, attenuation_number_of_added_caveats_head: 0, attenuation_number_of_added_caveats_ids: 0, caveat_body: [], caveat_predicate_adding: \"\", caveat_idx: 1,caveat_predicate_deleting: \"\"\n            ,copied:false,\n        }\n\n    }\n    componentDidMount() {\n        this.loadWasm();\n    }\n\n    loadWasm = async () => {\n        try {\n            const wasm = await import(\"biscuit-wasm\");\n\n            this.setState({ wasm, });\n\n        } catch (err) {\n            console.error(`Unexpected error in loadWasm. [Message: ${err.message}]`);\n        }\n    };\n    handleChange = (e) => {\n\n        if ([\"attenuation_head_parameter form-control\"].includes(e.target.className)) {\n            let attenuation_head_parameter = [...this.state.attenuation_head_parameter]\n            attenuation_head_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ attenuation_head_parameter: attenuation_head_parameter }, () => console.log(this.state.attenuation_head_parameter))\n        } else if ([\"attenuation_ids_parameter form-control\"].includes(e.target.className)) {\n            let attenuation_ids_parameter = [...this.state.attenuation_ids_parameter]\n            attenuation_ids_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ attenuation_ids_parameter: attenuation_ids_parameter }, () => console.log(this.state.attenuation_ids_parameter))\n        }\n        else if ([\"attenuation_ids_parameter_type form-control\"].includes(e.target.className)) {\n\n            let attenuation_ids_parameter = [...this.state.attenuation_ids_parameter]\n            attenuation_ids_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ attenuation_ids_parameter: attenuation_ids_parameter }, () => console.log(this.state.attenuation_ids_parameter))\n        }\n        else if ([\"attenuation_head_parameter_type form-control\"].includes(e.target.className)) {\n            let attenuation_head_parameter = [...this.state.attenuation_head_parameter]\n            attenuation_head_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ attenuation_head_parameter: attenuation_head_parameter }, () => console.log(this.state.attenuation_head_parameter))\n        }\n        else if ([\"attenuation_head_name form-control\"].includes(e.target.className)) {\n            this.setState({ attenuation_head_name: e.target.value }, () => console.log(this.state.attenuation_head_name))\n\n        }\n        else if ([\"attenuation_ids_name form-control\"].includes(e.target.className)) {\n            this.setState({ attenuation_ids_name: e.target.value }, () => console.log(this.state.attenuation_ids_name))\n        }\n        else if ([\"attenuation_caveat_head_parameter form-control\"].includes(e.target.className)) {\n            let attenuation_caveat_head_parameter = [...this.state.attenuation_caveat_head_parameter]\n            attenuation_caveat_head_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ attenuation_caveat_head_parameter: attenuation_caveat_head_parameter }, () => console.log(this.state.attenuation_caveat_head_parameter))\n        } else if ([\"attenuation_caveat_ids_parameter form-control\"].includes(e.target.className)) {\n            let attenuation_caveat_ids_parameter = [...this.state.attenuation_caveat_ids_parameter]\n            attenuation_caveat_ids_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ attenuation_caveat_ids_parameter: attenuation_caveat_ids_parameter }, () => console.log(this.state.attenuation_caveat_ids_parameter))\n        }\n        else if ([\"attenuation_caveat_ids_parameter_type form-control\"].includes(e.target.className)) {\n\n            let attenuation_caveat_ids_parameter = [...this.state.attenuation_caveat_ids_parameter]\n            attenuation_caveat_ids_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ attenuation_caveat_ids_parameter: attenuation_caveat_ids_parameter }, () => console.log(this.state.attenuation_caveat_ids_parameter))\n        }\n        else if ([\"attenuation_caveat_head_parameter_type form-control\"].includes(e.target.className)) {\n            let attenuation_caveat_head_parameter = [...this.state.attenuation_caveat_head_parameter]\n            attenuation_caveat_head_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ attenuation_caveat_head_parameter: attenuation_caveat_head_parameter }, () => console.log(this.state.attenuation_caveat_head_parameter))\n        }\n        else if ([\"attenuation_caveat_head_name form-control\"].includes(e.target.className)) {\n            this.setState({ attenuation_caveat_head_name: e.target.value }, () => console.log(this.state.attenuation_caveat_head_name))\n\n        }\n        else if ([\"attenuation_caveat_ids_name form-control\"].includes(e.target.className)) {\n            this.setState({ attenuation_caveat_ids_name: e.target.value }, () => console.log(this.state.attenuation_caveat_ids_name))\n        }\n\n        else if ([\"attenuation_fact_head_name form-control\"].includes(e.target.className)) {\n            this.setState({ attenuation_fact_head_name: e.target.value }, () => console.log(this.state.attenuation_fact_head_name))\n        }\n        else if ([\"attenuation_fact_parameter form-control\"].includes(e.target.className)) {\n            let attenuation_fact_head_parameters = [...this.state.attenuation_fact_head_parameters]\n            attenuation_fact_head_parameters[e.target.dataset.id].param = e.target.value\n            this.setState({ attenuation_fact_head_parameters: attenuation_fact_head_parameters }, () => console.log(this.state.attenuation_fact_head_parameters))\n        }\n        else if ([\"attenuation_fact_parameter_type form-control\"].includes(e.target.className)) {\n            let attenuation_fact_head_parameters = [...this.state.attenuation_fact_head_parameters]\n            attenuation_fact_head_parameters[e.target.dataset.id].type = e.target.value\n            this.setState({ attenuation_fact_head_parameters: attenuation_fact_head_parameters }, () => console.log(this.state.attenuation_fact_head_parameters))\n        }\n\n\n    }\n    handleChangee = (e) => {\n        let serialized = this.state.token;\n        let b64 = btoa(String.fromCharCode(...serialized));\n\n        this.setState({ valueEncoded: b64, valueDecoded: e.target.value });\n    }\n    handleChangee_attenuation = (e) => {\n        let serialized = this.state.tokenToAttenuate;\n        let b64 = btoa(String.fromCharCode(...serialized));\n\n        this.setState({ valueEncodedToAttenuate: b64, valueDecodedToAttenuate: e.target.value });\n    }\n    handleChange1_attenuation = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ tokenToAttenuate: token.toVec(), valueEncodedToAttenuate: e.target.value, valueDecodedToAttenuate: token.print(), message_encoded_attenuation: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncodedToAttenuate: e.target.value })\n            this.setState({ message_encoded_attenuation: \"Enter a valid token !\" })\n        }\n    }\n    handleChange1 = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token: token.toVec(), valueEncoded: e.target.value, valueDecoded: token.print(), message_encoded: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded: e.target.value })\n            this.setState({ message_encoded: \"Enter a valid token !\" })\n        }\n\n    }\n    handleChange_privateKey = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_privateKey: \"\" })\n\n            let privkey = new Uint8Array(32);\n            let pubkey = new Uint8Array(32);\n            let decoded = fromHex(e.target.value);\n            let keypair = wasm.KeyPair.fromBytes(decoded);\n\n\n            let publicKey = keypair.publicKey();\n\n            keypair.toBytes(privkey);\n            publicKey.toBytes(pubkey);\n\n            this.setState({ privateKey: toHex(privkey), publicKey: toHex(pubkey) });\n        }\n        catch (err) {\n\n            this.setState({ privateKey: e.target.value })\n\n            this.setState({ message_privateKey: \"enter a valid key !\" })\n        }\n    }\n    handleChange_privateKey_own_verification = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n\n            this.setState({ message_privateKey_own_verification: \"\" })\n            let privkey = new Uint8Array(32);\n            let pubkey = new Uint8Array(32);\n            let decoded = fromHex(e.target.value);\n            let keypair = wasm.KeyPair.fromBytes(decoded);\n\n\n            let publicKey = keypair.publicKey();\n\n            keypair.toBytes(privkey);\n            publicKey.toBytes(pubkey);\n\n            this.setState({ privateKey_own_verification: toHex(privkey), publicKey_own_verification: toHex(pubkey) });\n        }\n        catch (err) {\n\n            this.setState({ privateKey_own_verification: e.target.value })\n\n            this.setState({ message_privateKey_own_verification: \"enter a valid key !\" })\n        }\n\n    }\n    handleChange_attenuation_privateKey = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_privateKey_attenuation: \"\" })\n\n            let privkey = new Uint8Array(32);\n            let pubkey = new Uint8Array(32);\n            let decoded = fromHex(e.target.value);\n            let keypair = wasm.KeyPair.fromBytes(decoded);\n\n\n            let publicKey = keypair.publicKey();\n\n            keypair.toBytes(privkey);\n            publicKey.toBytes(pubkey);\n\n            this.setState({ attenuation_privateKey: toHex(privkey), attenuation_publicKey: toHex(pubkey) });\n        }\n        catch (err) {\n            this.setState({ attenuation_privateKey: e.target.value })\n\n            this.setState({ message_privateKey_attenuation: \"enter a valid key !\" })\n        }\n\n    }\n    handleChangee_example = (e) => {\n        let serialized = this.state.token_example;\n        let b64 = btoa(String.fromCharCode(...serialized));\n\n        this.setState({ valueEncoded_example: b64, valueDecoded_example: e.target.value });\n    }\n    handleChange1_example = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_encoded_example: \"\" })\n\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token_example: token.toVec(), valueEncoded_example: e.target.value, valueDecoded_example: token.print(), message_encoded_example: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded_example: e.target.value })\n            this.setState({ message_encoded_example: \"Enter a valid token !\" })\n        }\n\n    }\n    handleChange1_verification = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_encoded_verification: \"\" })\n\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token_verification: token.toVec(), valueEncoded_verification: e.target.value, valueDecoded_verification: token.print(), message_encoded_verification: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded_verification: e.target.value })\n            this.setState({ message_encoded_verification: \"Enter a valid token !\" })\n        }\n\n    }\n    handleChange2 = (e) => {\n\n\n        this.setState({ restrict: e.target.value });\n    }\n    handleChange3 = (e) => {\n\n\n        this.setState({ resource: e.target.value });\n    }\n\n    handleChange4 = (e) => {\n\n\n        this.setState({ resource_verify: e.target.value });\n    }\n    handleChange4_example = (e) => {\n\n\n        this.setState({ resource_verify_example: e.target.value });\n    }\n\n    handleChange5_example = (e) => {\n\n\n        this.setState({ restrict_verify_example: e.target.value });\n    }\n    handleChange5 = (e) => {\n\n\n        this.setState({ restrict_verify: e.target.value });\n    }\n    handleChange6 = (e) => {\n\n\n        this.setState({ seconds: e.target.value });\n    }\n\n    addFact = async (e) => {\n\n        this.setState((prevState) => ({\n            fact_head_parameters: [...prevState.fact_head_parameters, { param: \"\", type: \"\" }], number_of_added_fact: this.state.number_of_added_fact + 1\n        }));\n\n    }\n    delPredicate_rule = async (e) => {\n        this.setState({ rule_predicate_deleting: \"\" })\n        try {\n            console.log(\"in predicate rule body\", this.state.rule_body);\n\n\n            if (this.state.rule_body.length === 0) {\n                throw (SyntaxError(\"You don't have any predicate to delete !\"))\n\n            }\n            else if (this.state.rule_body.length === 1) {\n                this.setState({ rule_body: [], rule_predicate_deleting: \"Your last predicate has been deleted\", rule_predicate_adding: \"\" })\n            }\n            else {\n                let n = [...this.state.rule_body.splice(this.state.rule_body.length - 1, 1)]\n                console.log(\"in predicate rule body\", n);\n\n                this.setState((prevState) => ({\n\n                    rule_body: [...n], rule_predicate_deleting: \"Your last predicate has been deleted\", rule_predicate_adding: \"\"\n\n                }));\n                await new Promise(r => setTimeout(r, 3000));\n                console.log(\"last rule body\", this.state.rule_body)\n\n            }\n        }\n        catch (e) {\n            this.setState({ rule_predicate_deleting: e.message })\n        }\n    }\n\n    addPredicate_rule = async (e) => {\n        this.setState({ rule_predicate_adding: \"\" })\n        await new Promise(r => setTimeout(r, 500));\n        console.log(\"in predicate rule body\", this.state.rule_body);\n\n        try {\n            for (let pas = 1; pas <= this.state.attenuation_ids_parameter.length; pas++) {\n                if (this.state.attenuation_ids_name === \"\" || this.state.attenuation_ids_parameter[this.state.attenuation_ids_parameter.length - pas].param === \"\" || this.state.attenuation_ids_parameter[this.state.attenuation_ids_parameter.length - pas].type === \"\") {\n                    throw (SyntaxError(\"all predicate fields must be filled out\"))\n\n                }\n            }\n\n\n            if (this.state.rule_body.length === 0) {\n                this.setState({\n                    rule_body: [{ ids_name: this.state.attenuation_ids_name, rule_ids_parameter: this.state.attenuation_ids_parameter }], attenuation_ids_name: \"\", attenuation_ids_parameter: [{ param: \"\", type: \"\" }], rule_predicate_adding: \"your predicate has been added\", rule_idx: this.state.rule_idx + 1, hidden_msg_predicate: \"Your added predicates :\",\n\n                })\n                await new Promise(r => setTimeout(r, 1000));\n\n            }\n            else {\n                this.setState((prevState) => ({\n\n                    rule_body: [...this.state.rule_body, { ids_name: this.state.attenuation_ids_name, rule_ids_parameter: this.state.attenuation_ids_parameter }], attenuation_ids_name: \"\", attenuation_ids_parameter: [{ param: \"\", type: \"\" }], rule_predicate_adding: \"your predicate has been added\", rule_idx: this.state.rule_idx + 1, hidden_msg_predicate: \"Your added predicates :\",\n\n\n                }));\n            }\n        }\n        catch (e) {\n            this.setState({ rule_predicate_adding: e.message })\n        }\n\n    }\n    delPredicate_caveat = async (e) => {\n        this.setState({ caveat_predicate_deleting: \"\" })\n        try {\n            console.log(\"in predicate caveat body\", this.state.caveat_body);\n\n\n            if (this.state.caveat_body.length === 0) {\n                throw (SyntaxError(\"You don't have any predicate to delete !\"))\n\n            }\n            else if (this.state.caveat_body.length === 1) {\n                this.setState({ caveat_body: [], caveat_predicate_deleting: \"Your last predicate has been deleted\",caveat_predicate_adding: \"\" })\n            }\n            else {\n                let n = [...this.state.caveat_body.splice(this.state.caveat_body.length - 1, 1)]\n                console.log(\"in predicate caveat body\", n);\n\n                this.setState((prevState) => ({\n\n                    caveat_body: [...n], caveat_predicate_deleting: \"Your last predicate has been deleted\",caveat_predicate_adding: \"\"\n\n                }));\n                await new Promise(r => setTimeout(r, 3000));\n                console.log(\"last caveat body\", this.state.caveat_body)\n\n            }\n        }\n        catch (e) {\n            this.setState({ caveat_predicate_deleting: e.message })\n        }\n    }\n    copy() {\n        this.setState({copied:true})\n        const el = this.textArea\n        el.select()\n        document.execCommand(\"copy\")\n    }\n    addPredicate_caveat = async (e) => {\n        this.setState({ caveat_predicate_adding: \"\" })\n        await new Promise(r => setTimeout(r, 500));\n        try {\n            for (let pas = 0; pas < this.state.attenuation_caveat_ids_parameter.length; pas++) {\n                if (this.state.attenuation_caveat_ids_name === \"\" || this.state.attenuation_caveat_ids_parameter[pas].param === \"\" || this.state.attenuation_caveat_ids_parameter[pas].type === \"\") {\n                    throw (SyntaxError(\"all predicate fields must be filled out\"))\n\n                }\n            }\n\n            if (this.state.caveat_body.length === 0) {\n                this.setState({\n                    caveat_body: [{ ids_name: this.state.attenuation_caveat_ids_name, caveat_ids_parameter: this.state.attenuation_caveat_ids_parameter }], attenuation_caveat_ids_name: \"\", attenuation_caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"your predicate has been added\", caveat_idx: this.state.caveat_idx + 1, caveat_hidden_msg_predicate: \"Your added predicates :\",\n\n                })\n                await new Promise(r => setTimeout(r, 1000));\n                console.log(\"test\", this.state.caveat_body);\n\n            }\n            else {\n                this.setState((prevState) => ({\n\n                    caveat_body: [...prevState.caveat_body, { ids_name: this.state.caveat_ids_name, caveat_ids_parameter: this.state.caveat_ids_parameter }], caveat_ids_name: \"\", caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"your predicate has been added\", caveat_idx: this.state.caveat_idx + 1, caveat_hidden_msg_predicate: \"Your added predicates :\",\n                }));\n            }\n        }\n        catch (e) {\n            this.setState({ caveat_predicate_adding: e.message })\n        }\n    }\n    addFactAttenuation = (e) => {\n        this.setState((prevState) => ({\n            attenuation_fact_head_parameters: [...prevState.attenuation_fact_head_parameters, { param: \"\", type: \"\" }]\n        }));\n    }\n    addFactVerification = (e) => {\n        this.setState((prevState) => ({\n            verification_fact_head_parameters: [...prevState.verification_fact_head_parameters, { param: \"\", type: \"\" }], verification_number_of_added_fact: this.state.verification_number_of_added_fact + 1\n        }));\n    }\n    addRule1 = (e) => {\n        this.setState((prevState) => ({\n            ids_parameter: [...prevState.ids_parameter, { param: \"\", type: \"\" }], number_of_added_rules_ids: this.state.number_of_added_rules_ids + 1\n        }));\n    }\n    addRule = (e) => {\n        this.setState((prevState) => ({\n            head_parameter: [...prevState.head_parameter, { param: \"\", type: \"\" }], number_of_added_rules_head: this.state.number_of_added_rules_head + 1\n        }));\n    }\n    addRule1_attenuation = (e) => {\n        this.setState((prevState) => ({\n            attenuation_ids_parameter: [...prevState.attenuation_ids_parameter, { param: \"\", type: \"\" }], attenuation_number_of_added_rules_ids: this.state.attenuation_number_of_added_rules_ids + 1\n        }));\n    }\n    addRule_attenuation = (e) => {\n        this.setState((prevState) => ({\n            attenuation_head_parameter: [...prevState.attenuation_head_parameter, { param: \"\", type: \"\" }], attenuation_number_of_added_rules_head: this.state.attenuation_number_of_added_rules_head + 1\n        }));\n    }\n    addRule1_caveat = (e) => {\n        this.setState((prevState) => ({\n            caveat_ids_parameter: [...prevState.caveat_ids_parameter, { param: \"\", type: \"\" }], number_of_added_caveats_ids: this.state.number_of_added_caveats_ids + 1,\n        }));\n    }\n    addRule_caveat = (e) => {\n        this.setState((prevState) => ({\n            caveat_head_parameter: [...prevState.caveat_head_parameter, { param: \"\", type: \"\" }], number_of_added_caveats_head: this.state.number_of_added_caveats_head + 1,\n        }));\n    }\n    addCaveat1Attenuation = (e) => {\n        this.setState((prevState) => ({\n            attenuation_caveat_ids_parameter: [...prevState.attenuation_caveat_ids_parameter, { param: \"\", type: \"\" }], attenuation_number_of_added_caveats_ids: this.state.attenuation_number_of_added_caveats_ids + 1\n        }));\n    }\n    addCaveatAttenuation = (e) => {\n        this.setState((prevState) => ({\n            attenuation_caveat_head_parameter: [...prevState.attenuation_caveat_head_parameter, { param: \"\", type: \"\" }], attenuation_number_of_added_caveats_head: this.state.attenuation_number_of_added_caveats_head + 1\n        }));\n    }\n    addCaveat1Verification = (e) => {\n        this.setState((prevState) => ({\n            verification_caveat_ids_parameter: [...prevState.verification_caveat_ids_parameter, { param: \"\", type: \"\" }], verification_number_of_added_caveats_ids: this.state.verification_number_of_added_caveats_ids + 1\n        }));\n    }\n    addCaveatVerification = (e) => {\n        this.setState((prevState) => ({\n            verification_caveat_head_parameter: [...prevState.verification_caveat_head_parameter, { param: \"\", type: \"\" }], verification_number_of_added_caveats_head: this.state.verification_number_of_added_caveats_head + 1\n        }));\n    }\n    render() {\n        const { wasm = {} } = this.state;\n\n        const loadKeys_attenuation = () => {\n            let decoded = fromHex(this.state.attenuation_privateKey);\n            return wasm.KeyPair.fromBytes(decoded);\n        }\n        const btnText = this.state.copied ? 'Copied' : 'Copy to clipboard'\n\n\n\n        let attenuation_head_parameter = [...this.state.attenuation_head_parameter]\n        let attenuation_caveat_head_parameter = [...this.state.attenuation_caveat_head_parameter]\n        let attenuation_fact_head_parameters = [...this.state.attenuation_fact_head_parameters]\n        let attenuation_ids_parameter = [...this.state.attenuation_ids_parameter]\n        let attenuation_caveat_ids_parameter = [...this.state.attenuation_caveat_ids_parameter]\n\n        return (\n            <div>\n\n                <div className=\"container-fluid\">\n                    <div className=\"warning\">\n                        <div className=\"text-center\">\n                            <strong>Biscuitsec :</strong>\n\n                        Learn how the biscuit token works by interacting with it. For developers, the code of the application is available on our github\n                        </div>\n                    </div>\n\n\n\n\n                    <h1 className=\"mr-5 text-center\">Token Attenuation </h1>\n                    <br />\n\n                    <div className=\"mr-5 ml-5\">The process of attenuation is the generation of a derived token from an already existing biscuit, for the purpose of delegating a reduced set of rights. For instance, the rental agency can restrict the token so that the car must be returned before the end of the week. Note also that the attenuation may be managed from someone that currently holds the biscuit (e.g. the driver can delegate his rights to a secod driver) but is not the initial authority (e.g. the rental agency). Therefore the attenuated token may be using a different keypair than the original token. You may refer to our documentation <a href=\"https://www.w3schools.com/\">here</a> to get more details and examples. </div>\n                    <br />\n                    <br />\n                    <h2 className=\"mr-5 ml-5\">Keys Generation For Your Attenuated Token  </h2>\n                    <div className=\"ml-5 mr-5\">In order to attenuate your token and generate a new one you must generate a new keypair</div>\n                    <br />\n                    <div className=\"container-fluid mt-10\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>Public Key</h5></label> <small> press the button to generate your keys</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea2\" type=\"text\" readOnly value={this.state.attenuation_publicKey} rows=\"2\" />\n                                </div>\n\n\n\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label className=\"exampleFormControlTextarea1\"><h5>Private Key</h5></label><small> if you wanna use your private key paste it here</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" type=\"text\" value={this.state.attenuation_privateKey} onChange={this.handleChange_attenuation_privateKey} rows=\"2\" />\n                                </div>\n\n                                <button\n                                    onClick={async () => {\n\n                                        this.setState({ message_privateKey_attenuation: \"\" })\n                                        let privkey = new Uint8Array(32);\n                                        let pubkey = new Uint8Array(32);\n\n                                        let keypair = new wasm.KeyPair();\n                                        let publicKey = keypair.publicKey();\n\n                                        keypair.toBytes(privkey);\n                                        publicKey.toBytes(pubkey);\n\n                                        this.setState({ attenuation_privateKey: toHex(privkey), attenuation_publicKey: toHex(pubkey) });\n\n\n\n                                    }}>\n                                    Generate keys\n                                </button>\n                                <div>{this.state.message_privateKey_attenuation}</div>\n\n                            </div>\n\n                        </div>\n\n                    </div>\n                    <br />\n                    <div className=\"container-fluid mt-10\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"textarea-container\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>ENCODED</h5></label> <small> paste a token to attenuate here</small>\n                                    <textarea className=\"form-control\" ref={(textarea) => this.textArea = textarea} id=\"exampleFormControlTextarea2\" type=\"text\" value={this.state.valueEncodedToAttenuate} onChange={this.handleChange1_attenuation} rows=\"15\" />\n                                    <a onClick={() => this.copy()}>{btnText}</a>\n\n                                </div>\n                                <div>{this.state.message_encoded_attenuation}</div>\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label htmlFor=\"exampleFormControlTextarea1\"><h5>DECODED</h5></label><small> your result</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" readOnly type=\"text\" value={this.state.valueDecodedToAttenuate} onChange={this.handleChangee_attenuation} rows=\"15\" />\n                                </div>\n\n\n\n\n                            </div>\n                        </div>\n                    </div>\n                    <br />\n                    <br />\n                    <h2 className=\"mr-5 ml-5\">Examples of Token Attenuation </h2>\n                    <div className=\"ml-5 mr-5\">Here is some examples of a rental car agency delegating some rights to their clients by token attenuation</div>\n                    <br />\n                    <div className=\"container-fluid mt-10\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>Restrict Operation</h5></label>\n                                    <div>This is an exemple of restriction on the operations that the holder of the attenuated token can do.\n                                    For example if we fill out the field with open , the only opeartion the token holder can do is opening the car but not driving it.\n                                    </div>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea2\" placeholder=\"open\" type=\"text\" value={this.state.restrict} onChange={this.handleChange2} rows=\"1\" />\n                                </div>\n                                <button\n                                    onClick={async () => {\n                                        this.setState({ restrict_operation_message: '' })\n\n                                        try {\n                                            if (this.state.valueEncodedToAttenuate === '') {\n                                                throw (SyntaxError(\"You must enter the token to revocate !\"))\n                                            }\n                                            if (this.state.restrict === '') {\n                                                throw (SyntaxError(\"You must fill out the field !\"))\n\n                                            }\n                                            let data = new Uint8Array(atob(this.state.valueEncodedToAttenuate).split(\"\").map(function (c) {\n                                                return c.charCodeAt(0);\n                                            }));\n                                            let token = wasm.Biscuit.from(data);\n                                            let block = token.createBlock();\n                                            let operation = this.state.restrict;\n                                            block.addCaveat(wasm.rule(\n                                                \"operation_check\",\n                                                [{ symbol: operation }],\n                                                [{ name: \"operation\", ids: [{ symbol: \"ambient\" }, { symbol: operation }] }]\n                                            ));\n\n                                            let keypair2 = new wasm.KeyPair()\n                                            let token2 = token.append(keypair2, block);\n\n                                            let serialized = token2.toVec();\n                                            let b64 = btoa(String.fromCharCode(...serialized));\n                                            this.setState({ restrict_operation_message: \"Your restriction has been set\" })\n\n                                            this.setState({ tokenToAttenuate: token2.toVec(), valueEncodedToAttenuate: b64, valueDecodedToAttenuate: token2.print() });\n                                        }\n                                        catch (e) {\n                                            this.setState({ restrict_operation_message: e.message })\n                                        }\n\n\n                                    }}>\n                                    Restrict operation\n                                </button>\n                                <div >{this.state.restrict_operation_message}</div>\n                                <br /> <br />\n                                <div className=\"form-group brown-border-focus\">\n                                    <label htmlFor=\"exampleFormControlTextarea1\"><h5>Restrict Resource </h5></label>\n                                    <div> This is an exemple of a restriction on a resource set by a car rental agency , it provides to every client who rents a car an attenuated token with\n                                    a restriction on the resource in order to give him the right to drive only the car which her name verify the restriction.\n                                        For example if the rental agency want to rent a car which we suppose its name is \"car1\" we must fill out the field below by car1  </div>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" placeholder=\"car1\" type=\"text\" value={this.state.resource} onChange={this.handleChange3} rows=\"1\" />\n\n                                </div>\n                                <button\n                                    onClick={async () => {\n                                        try {\n                                            this.setState({ resource_prefix_message: '' })\n\n                                            if (this.state.valueEncodedToAttenuate === '') {\n                                                throw (SyntaxError(\"You must enter the token to revocate !\"))\n                                            }\n                                            if (this.state.resource === '') {\n                                                throw (SyntaxError(\"You must fill out the field !\"))\n\n                                            }\n                                            let data = new Uint8Array(atob(this.state.valueEncodedToAttenuate).split(\"\").map(function (c) {\n                                                return c.charCodeAt(0);\n                                            }));\n                                            let token = wasm.Biscuit.from(data);\n\n                                            let resourcePrefix = this.state.resource;\n\n                                            let block = token.createBlock();\n                                            block.addCaveat(wasm.constrained_rule(\n                                                \"resource_check\",\n                                                [{ variable: 0 }],\n                                                [\n                                                    {\n                                                        name: \"resource\",\n                                                        ids: [{ symbol: \"ambient\" }, { variable: 0 }]\n                                                    },\n                                                ],\n                                                [{ id: 0, kind: \"string\", operation: \"prefix\", data: resourcePrefix }]\n                                            ));\n\n                                            let keypair2 = new wasm.KeyPair()\n                                            let token2 = token.append(keypair2, block);\n\n                                            let serialized = token2.toVec();\n                                            let b64 = btoa(String.fromCharCode(...serialized));\n                                            this.setState({ resource_prefix_message: \"Your restriction has been set\" })\n\n                                            this.setState({ tokenToAttenuate: token2.toVec(), valueEncodedToAttenuate: b64, valueDecodedToAttenuate: token2.print() });\n                                        }\n                                        catch (e) {\n                                            this.setState({ resource_prefix_message: e.message })\n                                        }\n\n                                    }}>\n                                    Restrict resource\n                                </button>\n                                <div >{this.state.resource_prefix_message}</div>\n\n\n\n                            </div>\n                            <br />\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label htmlFor=\"exampleFormControlTextarea1\"><h5>Token Expiration</h5></label>\n                                    <div>We can also attenuate a token for a defined moment by specifying how much time the token will be valid.\n                                    If we fill out the field with 3600 (second) the token we be usable for only one hour so for the example of a rental car agency the car will be rented only one hour\n                                    </div>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" placeholder=\"30 (seconds)\" type=\"text\" value={this.state.seconds} onChange={this.handleChange6} rows=\"1\" />\n\n                                </div>\n                                <button\n                                    onClick={async () => {\n                                        this.setState({ token_revocation_message: '' })\n\n                                        try {\n                                            if (this.state.valueEncodedToAttenuate === '') {\n                                                throw (SyntaxError(\"You must enter the token to revocate !\"))\n                                            }\n                                            if (this.state.seconds === '') {\n                                                throw (SyntaxError(\"You must fill out the field !\"))\n\n                                            }\n                                            if (isNaN(this.state.seconds)===true)\n                                            {\n                                                throw(SyntaxError(\"You must enter an integer \"))\n                                            }\n                                            let data = new Uint8Array(atob(this.state.valueEncodedToAttenuate).split(\"\").map(function (c) {\n                                                return c.charCodeAt(0);\n                                            }));\n                                            let token = wasm.Biscuit.from(data);\n\n                                            let seconds = parseInt(this.state.seconds);\n                                            let expirationDate = parseInt(((new Date((new Date()).getTime() + seconds * 1000)) / 1000).toFixed(0));\n                                            console.log(\"expires at \" + expirationDate);\n\n                                            let block = token.createBlock();\n                                            block.addCaveat(wasm.constrained_rule(\n                                                \"expiration_check\",\n                                                [{ variable: 0 }],\n                                                [\n                                                    {\n                                                        name: \"time\",\n                                                        ids: [{ symbol: \"ambient\" }, { variable: 0 }]\n                                                    },\n                                                ],\n                                                [{ id: 0, kind: \"date\", operation: \"<=\", data: expirationDate }]\n                                            ));\n\n                                            let keypair2 = new wasm.KeyPair()\n                                            let token2 = token.append(keypair2, block);\n                                            let serialized = token2.toVec();\n                                            let b64 = btoa(String.fromCharCode(...serialized));\n                                            \n                                            this.setState({ tokenToAttenuate: token2.toVec(), valueEncodedToAttenuate: b64, valueDecodedToAttenuate: token2.print() })\n                                            this.setState({ token_revocation_message: \"Your expiration time has been set\" })\n\n                                        }\n                                        catch (e) {\n                                            this.setState({ token_revocation_message: e.message })\n                                        }\n\n                                    }}>\n                                    Time before expiration\n                                </button>\n                                <div >{this.state.token_revocation_message}</div>\n\n\n                            </div>\n\n                        </div>\n\n                    </div>\n                    <br />\n                    <h2 className=\"mr-5 ml-5\">Set your own attenuation  </h2>\n\n                    <br />\n                    <div className=\"container-fluid mt-10\" onChange={this.handleChange}>\n                        <div className=\"row\">\n\n                            <div className=\"col-3 ml-5 mr-5\">\n                                <h2>Add a new rule</h2>\n\n                            </div>\n                        </div>\n                        <div className=\"ml-5 mr-5\">The rule has the same structure as the authority rule and it will be applied on the facts of the attenuated token.\n                        <br /><strong>Note : if the rule generates an ambient or an authority fact it will automatically fail in the verification process. </strong></div>\n                        <br />\n                        <div className=\"ml-5\"><h3>Header</h3></div>\n\n                        <div className=\"row\">\n\n                            <div className=\"col-1 mr-2 ml-5 \">\n                                <div className=\"row\">\n                                    <label >{`head name `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.attenuation_head_name}\n                                        className=\"attenuation_head_name form-control\"\n                                        id=\"head-name\"\n                                        row=\"1\"\n\n                                    />\n\n                                </div>\n                            </div>\n\n                            <HeadInputAttenuation rules={attenuation_head_parameter}\n\n\n\n                            />\n                            <div className=\"col-0 mr-3 \">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\">\n\n                                    <IconButton onClick={this.addRule_attenuation} >\n                                        < AddCircleIcon />\n                                    </IconButton>\n\n                                </div>\n                            </div>\n\n                        </div>\n                        <div className=\"ml-5\"><h3>Body</h3></div>\n                        <h5 className=\"ml-5\">{this.state.hidden_msg_predicate}</h5>\n\n                        <ShowPredicate predicates={this.state.rule_body} />\n                        <div className=\"row\">\n                            <div className=\"col-1 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`pid${this.state.rule_idx} `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea id=\"outlined-basic\" label=\"ids\" variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.attenuation_ids_name}\n                                        className=\"attenuation_ids_name form-control\"\n                                    />\n\n                                </div>\n                            </div>\n\n                            <HeadInput1Attenuation rules={attenuation_ids_parameter} rule_idx={this.state.rule_idx}\n\n\n\n                            />\n                            <div className=\"col-0 mr-2\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n                                    <h3>\n                                        <IconButton onClick={this.addRule1_attenuation} >\n                                            < AddCircleIcon />\n                                        </IconButton>\n                                    </h3>\n\n\n                                </div>\n                            </div>\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n                                    <button onClick={this.addPredicate_rule} >\n                                        add predicate\n                                        </button>\n                                    <div>{this.state.rule_predicate_adding}</div>\n\n\n\n                                </div>\n                            </div>\n                            \n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n\n                                    <button onClick={this.delPredicate_rule} >\n                                        Delete last predicate\n                                    </button>\n                                    <div>{this.state.rule_predicate_deleting}</div>\n\n\n\n\n                                </div>\n                            </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        </div>\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-0 \">\n                                <button onClick={async () => {\n                                    try {\n\n                                        this.setState({ attenuation_rule_adding_message: '' })\n                                        for (let pas = 0; pas < this.state.attenuation_head_parameter.length; pas++) {\n                                            if (this.state.attenuation_head_name === \"\" || this.state.attenuation_head_parameter[pas].param === \"\" || this.state.attenuation_head_parameter[pas].type === \"\") {\n                                                throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                            }\n                                        }\n\n                                        if (this.state.attenuation_rule_counter === 0) {\n\n\n                                            if (this.state.rule_body.length === 0) {\n                                                throw (SyntaxError(\"You must add at least one predicate !\"))\n                                            }\n                                            this.setState({\n                                                attenuation_rules: [{ head_parameter: this.state.attenuation_head_parameter, head_name: this.state.attenuation_head_name, body: this.state.rule_body }]\n                                            });\n\n\n                                        }\n                                        else {\n\n                                            if (this.state.rule_body.length === 0) {\n                                                throw (SyntaxError(\"You must add at least one predicate !\"))\n                                            }\n\n                                            this.setState((prevState) => ({\n                                                attenuation_rules: [...prevState.attenuation_rules, { head_parameter: this.state.attenuation_head_parameter, head_name: this.state.attenuation_head_name, body: this.state.rule_body }]\n                                            }));\n                                        }\n                                        this.setState({ attenuation_rule_adding_message: \"Your new rule has been added\" });\n\n                                        this.setState({ attenuation_rule_counter: this.state.attenuation_rule_counter + 1 })\n                                        this.setState({ attenuation_head_parameter: [{ param: \"\", type: \"\" }], attenuation_head_name: '', rule_idx: 1, caveat_predicate_adding: \"\", body: [], rule_body: [] })\n                                        await new Promise(r => setTimeout(r, 1000));\n\n                                    }\n\n                                    catch (e) {\n                                        this.setState({ attenuation_rule_adding_message: e.message })\n                                    }\n\n                                }}>Add rule</button>\n                            </div>\n                            <div className=\"col-2 ml-2\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        this.setState({\n\n\n                                            attenuation_head_parameter: [{ param: \"\", type: \"\" }], attenuation_ids_parameter: [{ param: \"\", type: \"\" }], attenuation_head_name: \"\", attenuation_ids_name: \"\",\n\n                                            attenuation_rule_adding_message: \"\", attenuation_rule_counter: 0,\n                                            attenuation_number_of_added_rules_head: 0, attenuation_number_of_added_rules_ids: 0, rule_body: [],\n                                            rule_predicate_adding: \"\", rule_idx: 1, rule_predicate_deleting: \"\",\n\n                                        })\n\n\n\n\n\n                                    }}>Reset rule</button>\n                                </div>\n                            </div>\n                        </div>\n                        <br />\n                        <div className=\"row\">\n\n                            <div className=\"col-2 mr-2 ml-5 \">\n                                <div id=\"attenuation_rule_adding_result\">{this.state.attenuation_rule_adding_message}</div>\n\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-3 ml-5\">\n                                <h2>Add a new fact</h2>\n\n                            </div>\n                        </div>\n                        <div className=\"ml-5 mr-5\">The fact in the attenuated token has the same structure as the one explained in the genration page but the only difference is the fact here hold the rights of the attenuated token.\n                            <br /><strong>Note : the fact cannot contain the authority or ambient symbols otherwise the verification will fail</strong></div>\n                        <br />\n                        <div className=\"row\">\n\n                            <div className=\"col-1 mr-2 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`fact name `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.attenuation_fact_head_name}\n                                        className=\"attenuation_fact_head_name form-control\"\n                                        id=\"fact-head-name\"\n                                        row=\"1\"\n\n                                    />\n\n                                </div>\n                            </div>\n\n                            <FactParamInputAttenuation rules={attenuation_fact_head_parameters}\n\n                            />\n                            <div className=\"col-0 mr-3 \">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\">\n\n                                    <IconButton onClick={this.addFactAttenuation} >\n                                        < AddCircleIcon />\n                                    </IconButton>\n\n                                </div>\n                            </div>\n\n                        </div>\n\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-0 \">\n                                <button className=\"col-12\" onClick={async () => {\n                                    try {\n                                        this.setState({ attenuation_fact_adding_message: '' })\n                                        for (let pas = 0; pas < this.state.attenuation_fact_head_parameters.length; pas++) {\n                                            if (this.state.attenuation_fact_head_name === \"\" || this.state.attenuation_fact_head_parameters[pas].param === \"\" || this.state.attenuation_fact_head_parameters[pas].type === \"\") {\n                                                throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                            }\n                                        }\n                                        if (this.state.attenuation_fact_counter === 0) {\n                                            \n                                            this.setState({\n                                                attenuation_facts: [{ fact_head_parameters: this.state.attenuation_fact_head_parameters, fact_head_name: this.state.attenuation_fact_head_name, }]\n                                            });\n                                        }\n                                        else {\n                                            \n                                            this.setState((prevState) => ({\n                                                attenuation_facts: [...prevState.attenuation_facts, { fact_head_parameters: this.state.attenuation_fact_head_parameters, fact_head_name: this.state.attenuation_fact_head_name, }]\n                                            }));\n                                        }\n                                        this.setState({ attenuation_fact_head_name: \"\", attenuation_fact_head_parameters: [{ param: \"\", type: \"\" }] })\n\n                                        this.setState({ attenuation_fact_adding_message: \"Your new fact has been added\" });\n\n                                        this.setState({ attenuation_fact_counter: this.state.attenuation_fact_counter + 1 })\n\n\n                                    }\n                                    catch (e) {\n\n                                        this.setState({ attenuation_fact_adding_message: e.message })\n\n                                    }\n\n                                }}>Add fact</button>\n                            </div>\n                            <div className=\"col-2 ml-3\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        this.setState({\n\n\n\n                                            attenuation_fact_head_name: \"\", attenuation_fact_head_parameters: [{ param: \"\", type: \"\" }],\n                                            \n                                            attenuation_fact_adding_message: \"\", \n                                        })\n\n\n\n\n\n                                    }}>Reset fact</button>\n                                </div>\n                            </div>\n                        </div>\n                        <br />\n                        <div className=\"row\">\n\n                            <div className=\"col-2 mr-2 ml-5\">\n                                <div id=\"fact_adding_result\">{this.state.attenuation_fact_adding_message}</div>\n\n                            </div>\n                        </div>\n                        <br />\n                        <div className=\"row\">\n\n                            <div className=\"col-3 ml-5 mr-5\">\n                                <h2>Add a new caveat</h2>\n\n                            </div>\n                        </div>\n                        <div className=\"ml-5 mr-5\">Caveats are logic queries evaluating conditions on authority and ambient facts. To validate an operation, all of a token's caveats must succeed.In the attenuated token the caveat are used to set conditions on the rights that the holder of the attenuated token can have. </div>\n                        <div className=\"ml-5\"><h3>Header</h3></div>\n\n                        <div className=\"row\">\n\n                            <div className=\"col-1 mr-2 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`head name `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.attenuation_caveat_head_name}\n                                        className=\"attenuation_caveat_head_name form-control\"\n                                        id=\"head-name\"\n                                        row=\"1\"\n\n                                    />\n\n                                </div>\n                            </div>\n\n                            <CaveatInputAttenuation rules={attenuation_caveat_head_parameter}\n                                type=\"text\"\n\n                            />\n                            <div className=\"col-0 mr-3 \">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\">\n\n                                    <IconButton onClick={this.addCaveatAttenuation} >\n                                        < AddCircleIcon />\n                                    </IconButton>\n\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"ml-5\"><h3>Body</h3></div>\n                        <h5 className=\"ml-5\">{this.state.caveat_hidden_msg_predicate}</h5>\n\n                        <ShowPredicateCaveat predicates={this.state.caveat_body} />\n                        <div className=\"row\">\n                            <div className=\"col-1 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`pid${this.state.caveat_idx}`}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea id=\"outlined-basic\" label=\"ids\" variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.attenuation_caveat_ids_name}\n                                        className=\"attenuation_caveat_ids_name form-control\"\n                                    />\n\n                                </div>\n                            </div>\n\n                            <CaveatInput1Attenuation rules={attenuation_caveat_ids_parameter} caveat_idx={this.state.caveat_idx}\n\n\n\n                            />\n                            <div className=\"col-0 mr-2\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n                                    <h3>\n                                        <IconButton onClick={this.addCaveat1Attenuation} >\n                                            < AddCircleIcon />\n                                        </IconButton>\n                                    </h3>\n\n\n                                </div>\n                            </div>\n\n\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n                                    <button onClick={this.addPredicate_caveat} >\n                                        add predicate\n                                        </button>\n                                    <div>{this.state.caveat_predicate_adding}</div>\n\n\n\n                                </div>\n                            </div>\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n\n                                    <button onClick={this.delPredicate_caveat} >\n                                        Delete last predicate\n                                    </button>\n                                    <div>{this.state.caveat_predicate_deleting}</div>\n\n\n\n\n                                </div>\n                            </div>\n\n\n\n\n\n\n\n\n\n\n\n\n                        </div>\n                        <br />\n                        <div className=\"row\">\n                            <br />\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-0 ml-1 \">\n                                <button onClick={async () => {\n                                    try {\n\n                                        this.setState({ attenuation_caveat_adding_message: '' })\n                                        for (let pas = 0; pas < this.state.attenuation_caveat_head_parameter.length; pas++) {\n                                            if (this.state.attenuation_caveat_head_name === \"\" || this.state.attenuation_caveat_head_parameter[pas].param === \"\" || this.state.attenuation_caveat_head_parameter[pas].type === \"\") {\n                                                throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                            }\n                                        }\n                                        if (this.state.attenuation_caveat_counter === 0) {\n\n                                            if (this.state.caveat_body.length === 0) {\n                                                throw (SyntaxError(\"You must add at least one predicate !\"))\n                                            }\n\n                                            this.setState({\n                                                attenuation_caveats: [{ head_parameter: this.state.attenuation_caveat_head_parameter, head_name: this.state.attenuation_caveat_head_name, body: this.state.caveat_body }]\n                                            });\n                                        }\n                                        else {\n\n\n                                            if (this.state.caveat_body.length === 0) {\n                                                throw (SyntaxError(\"You must add at least one predicate !\"))\n                                            }\n                                            this.setState((prevState) => ({\n                                                attenuation_caveats: [...prevState.attenuation_caveats, { head_parameter: this.state.attenuation_caveat_head_parameter, head_name: this.state.attenuation_caveat_head_name, body: this.state.caveat_body }]\n                                            }));\n                                        }\n                                        this.setState({ attenuation_caveat_adding_message: \"Your new caveat has been added\" });\n\n                                        this.setState({ attenuation_caveat_counter: this.state.attenuation_caveat_counter + 1 })\n                                        this.setState({ attenuation_caveat_head_name: \"\", attenuation_caveat_head_parameter: [{ param: \"\", type: \"\" }], caveat_idx: 1, rule_predicate_adding: \"\", body: [], caveat_body: [] })\n\n                                    }\n                                    catch (e) {\n                                        this.setState({ attenuation_caveat_adding_message: e.message })\n                                    }\n\n\n                                }}>Add caveat</button>\n                            </div>\n\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        this.setState({\n\n                                            attenuation_caveat_head_parameter: [{ param: \"\", type: \"\" }], attenuation_caveat_ids_parameter: [{ param: \"\", type: \"\" }], attenuation_caveat_head_name: \"\", attenuation_caveat_ids_name: \"\",\n                                            attenuation_caveat_adding_message: \"\", attenuation_number_of_added_caveats_head: 0, attenuation_number_of_added_caveats_ids: 0, caveat_body: [], caveat_predicate_adding: \"\", caveat_idx: 1,caveat_predicate_deleting: \"\"\n                                            \n\n\n\n                                        })\n\n\n\n\n\n                                    }}>Reset caveat</button>\n                                </div>\n                            </div>\n\n\n                        </div>\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-2 mr-2 \">\n                                <div id=\"attenuation_caveat_adding_result\">{this.state.attenuation_caveat_adding_message}</div>\n\n                            </div>\n                        </div>\n\n                        <br /> <br />\n\n                        <div className=\"row\">\n                            <div className=\"col-4\">\n\n                            </div>\n                            <div className=\"col-2 ml-5\">\n                                <button onClick={async () => {\n                                    this.setState({ gen_err_attenuation: '' })\n\n                                    try {\n                                        if (this.state.valueEncodedToAttenuate === '') {\n                                            throw (SyntaxError(\"You must enter the token to attenuate !\"))\n                                        }\n                                        let data = new Uint8Array(atob(this.state.valueEncodedToAttenuate).split(\"\").map(function (c) {\n                                            return c.charCodeAt(0);\n                                        }));\n                                        let token = wasm.Biscuit.from(data);\n                                        let block = token.createBlock();\n\n                                        if (this.state.attenuation_rule_counter > 0) {\n                                            for (let pas = 0; pas < this.state.attenuation_rules.length; pas++) {\n                                                console.log(\"step {}\", pas);\n                                                let head_parameter1 = [...this.state.attenuation_rules[pas].head_parameter];\n                                                let head_parameter = [];\n                                                for (let pas1 = 0; pas1 < head_parameter1.length; pas1++) {\n                                                    if (head_parameter1[pas1].type === \"variable\") {\n                                                        head_parameter = [...head_parameter, { variable: parseInt(head_parameter1[pas1].param) }]\n                                                    }\n                                                    else if (head_parameter1[pas1].type === \"string\") {\n                                                        head_parameter = [...head_parameter, { string: head_parameter1[pas1].param }]\n                                                    }\n                                                    else if (head_parameter1[pas1].type === \"symbol\") {\n                                                        head_parameter = [...head_parameter, { symbol: head_parameter1[pas1].param }]\n                                                    }\n                                                    else if (head_parameter1[pas1].type === \"integer\") {\n                                                        head_parameter = [...head_parameter, { integer: parseInt(head_parameter1[pas1].param) }]\n                                                    }\n                                                    else if (head_parameter1[pas1].type === \"date\") {\n                                                        head_parameter = [...head_parameter, { date: Date.parse(head_parameter1[pas1].param) }]\n                                                    }\n                                                }\n                                                // console.log(head_parameter)\n                                                let body = [...this.state.attenuation_rules[pas].body];\n                                                console.log(\"last test body rule\", this.state.attenuation_rules[pas].body)\n                                                let body_for_rule = [];\n                                                for (let pas1 = 0; pas1 < body.length; pas1++) {\n                                                    let ids_name = body[pas1].ids_name\n                                                    let ids_parameters = [...body[pas1].rule_ids_parameter]\n                                                    let ids_parameter_for_rule = []\n                                                    for (let pas2 = 0; pas2 < ids_parameters.length; pas2++) {\n                                                        if (ids_parameters[pas2].type === \"variable\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { variable: parseInt(ids_parameters[pas2].param) }]\n                                                        }\n                                                        else if (ids_parameters[pas2].type === \"string\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { string: ids_parameters[pas2].param }]\n                                                        }\n                                                        else if (ids_parameters[pas2].type === \"symbol\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { symbol: ids_parameters[pas2].param }]\n                                                        }\n                                                        else if (ids_parameters[pas2].type === \"integer\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { integer: parseInt(ids_parameters[pas2].param) }]\n                                                        }\n                                                        else if (ids_parameters[pas2].type === \"date\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { date: Date.parse(ids_parameters[pas2].param) }]\n                                                        }\n                                                    }\n                                                    body_for_rule = [...body_for_rule, {\n                                                        name: ids_name,\n                                                        ids: ids_parameter_for_rule\n                                                    }]\n                                                }\n                                                console.log(\"body_for_rule\", body_for_rule);\n                                                let rule = wasm.rule(\n                                                    this.state.attenuation_rules[pas].head_name,\n                                                    head_parameter,\n                                                    body_for_rule\n                                                )\n                                                block.addRule(rule);\n                                            }\n                                        }\n\n                                        console.log(\"fact counter :\", this.state.attenuation_fact_counter);\n                                        if (this.state.attenuation_fact_counter > 0) {\n                                            for (let pas = 0; pas < this.state.attenuation_facts.length; pas++) {\n\n                                                let fact_parameter1 = [...this.state.attenuation_facts[pas].fact_head_parameters];\n                                                let fact_parameter = [];\n                                                for (let pas1 = 0; pas1 < fact_parameter1.length; pas1++) {\n                                                    if (fact_parameter1[pas1].type === \"variable\") {\n                                                        fact_parameter = [...fact_parameter, { variable: parseInt(fact_parameter1[pas1].param) }]\n                                                    }\n                                                    else if (fact_parameter1[pas1].type === \"string\") {\n                                                        fact_parameter = [...fact_parameter, { string: fact_parameter1[pas1].param }]\n                                                    }\n                                                    else if (fact_parameter1[pas1].type === \"symbol\") {\n                                                        fact_parameter = [...fact_parameter, { symbol: fact_parameter1[pas1].param }]\n                                                    }\n                                                    else if (fact_parameter1[pas1].type === \"integer\") {\n                                                        fact_parameter = [...fact_parameter, { integer: parseInt(fact_parameter1[pas1].param) }]\n                                                    }\n                                                    else if (fact_parameter1[pas1].type === \"date \") {\n                                                        fact_parameter = [...fact_parameter, { date : Date.parse(fact_parameter1[pas1].param) }]\n                                                    }\n                                                }\n                                                let fact = wasm.fact(\n                                                    this.state.attenuation_facts[pas].fact_head_name,\n                                                    fact_parameter,\n\n                                                )\n                                                block.addFact(fact);\n\n\n                                            }\n\n                                        }\n                                        console.log(\"caveat counter :\", this.state.attenuation_caveat_counter);\n                                        if (this.state.attenuation_caveat_counter > 0) {\n                                            for (let pas = 0; pas < this.state.attenuation_caveats.length; pas++) {\n                                                console.log(\"step {}\", pas);\n                                                let head_parameter1 = [...this.state.attenuation_caveats[pas].head_parameter];\n                                                let head_parameter = [];\n                                                for (let pas1 = 0; pas1 < head_parameter1.length; pas1++) {\n                                                    if (head_parameter1[pas1].type === \"variable\") {\n                                                        head_parameter = [...head_parameter, { variable: parseInt(head_parameter1[pas1].param) }]\n                                                    }\n                                                    else if (head_parameter1[pas1].type === \"string\") {\n                                                        head_parameter = [...head_parameter, { string: head_parameter1[pas1].param }]\n                                                    }\n                                                    else if (head_parameter1[pas1].type === \"symbol\") {\n                                                        head_parameter = [...head_parameter, { symbol: head_parameter1[pas1].param }]\n                                                    }\n                                                    else if (head_parameter1[pas1].type === \"integer\") {\n                                                        head_parameter = [...head_parameter, { integer: parseInt(head_parameter1[pas1].param) }]\n                                                    }\n                                                    else if (head_parameter1[pas1].type === \"date\") {\n                                                        head_parameter = [...head_parameter, { date: Date.parse(head_parameter1[pas1].param) }]\n                                                    }\n                                                }\n                                                // console.log(head_parameter)\n                                                let body = [...this.state.attenuation_caveats[pas].body];\n                                                let body_for_rule = [];\n                                                for (let pas1 = 0; pas1 < body.length; pas1++) {\n                                                    let ids_name = body[pas1].ids_name\n                                                    let ids_parameters = [...body[pas1].caveat_ids_parameter]\n                                                    let ids_parameter_for_rule = []\n                                                    for (let pas2 = 0; pas2 < ids_parameters.length; pas2++) {\n                                                        if (ids_parameters[pas2].type === \"variable\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { variable: parseInt(ids_parameters[pas2].param) }]\n                                                        }\n                                                        else if (ids_parameters[pas2].type === \"string\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { string: ids_parameters[pas2].param }]\n                                                        }\n                                                        else if (ids_parameters[pas2].type === \"symbol\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { symbol: ids_parameters[pas2].param }]\n                                                        }\n                                                        else if (ids_parameters[pas2].type === \"date\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { date: Date.parse(ids_parameters[pas2].param) }]\n                                                        }\n                                                        else if (ids_parameters[pas2].type === \"integer\") {\n                                                            ids_parameter_for_rule = [...ids_parameter_for_rule, { integer : parseInt(ids_parameters[pas2].param) }]\n                                                        }\n                                                    }\n                                                    body_for_rule = [...body_for_rule, {\n                                                        name: ids_name,\n                                                        ids: ids_parameter_for_rule\n                                                    }]\n                                                }\n                                                console.log(\"body_for_rule\", body_for_rule);\n\n\n                                                let rule = wasm.rule(\n                                                    this.state.attenuation_caveats[pas].head_name,\n                                                    head_parameter,\n                                                    body_for_rule\n                                                )\n                                                block.addCaveat(rule);\n                                            }\n                                        }\n\n                                        if (this.state.attenuation_privateKey === '') {\n                                            throw SyntaxError(\"Your must enter or generate your private key before generating the token\")\n                                        }\n                                        let token2 = token.append(loadKeys_attenuation(), block);\n\n                                        let serialized = token2.toVec();\n                                        let b64 = btoa(String.fromCharCode(...serialized));\n\n                                        this.setState({ tokenToAttenuate: token2.toVec(), valueEncodedToAttenuate: b64, valueDecodedToAttenuate: token2.print() });\n                                        this.setState({\n                                            //rule attenuation states\n                                            attenuation_head_parameter: [{ param: \"\", type: \"\" }], attenuation_ids_parameter: [{ param: \"\", type: \"\" }], attenuation_head_name: \"\", attenuation_ids_name: \"\",\n                                            attenuation_rules: [{ head_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", body: [] }],\n                                            attenuation_rule_adding_message: \"\", attenuation_rule_counter: 0, attenuation_number_of_added_rules_head: 0, attenuation_number_of_added_rules_ids: 0, rule_body: [], rule_predicate_adding: \"\", rule_idx: 1, hidden_msg_predicate: \"\",\n                                            //fact attenuation states\n                                            attenuation_fact_head_name: \"\", attenuation_fact_head_parameters: [{ param: \"\", type: \"\" }],\n                                            attenuation_facts: [{ fact_head_parameters: [{ param: \"\", type: \"\" }], fact_head_name: \"\" }],\n                                            attenuation_fact_adding_message: \"\", attenuation_fact_counter: 0, attenuation_number_of_added_fact: 0,\n                                            //caveat attenuation states\n                                            attenuation_caveat_head_parameter: [{ param: \"\", type: \"\" }], attenuation_caveat_ids_parameter: [{ param: \"\", type: \"\" }], attenuation_caveat_head_name: \"\", attenuation_caveat_ids_name: \"\",\n                                            attenuation_caveats: [{ head_parameter: [{ param: \"\", type: \"\" }], ids_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", ids_name: \"\" }],\n                                            attenuation_caveat_adding_message: \"\", attenuation_caveat_counter: 0, attenuation_number_of_added_caveats_head: 0, attenuation_number_of_added_caveats_ids: 0, caveat_body: [], caveat_predicate_adding: \"\", caveat_idx: 1, caveat_hidden_msg_predicate: \"\",\n\n                                        })\n                                    } catch (e) {\n                                        this.setState({ gen_err_attenuation: e.message });\n                                    }\n\n\n\n\n\n\n                                }}\n\n                                > Generate your new token </button>\n                                <div>{this.state.gen_err_attenuation}</div>\n\n                            </div>\n                        </div>\n\n                    </div>\n\n\n\n\n                </div>\n\n            </div >\n\n        )\n    }\n}\nexport default Debugger;\n\n\n","import React from \"react\"\n\nconst CaveatInput1Verification = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let Verification_caveat_ids_parameter_Id = `Verification_caveat_ids_parameter-${idx}`, Verification_caveat_ids_parameter_type_Id = `Verification_caveat_ids_parameter_type-${idx}`\n            return (\n\n\n                <div key={idx} className=\"col-3 ml-2\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`p${props.caveat_idx}_${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"ids's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={Verification_caveat_ids_parameter_Id}\n                                    data-id={idx}\n                                    id={Verification_caveat_ids_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"verification_caveat_ids_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={Verification_caveat_ids_parameter_type_Id}\n                                    data-id={idx}\n                                    id={Verification_caveat_ids_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"verification_caveat_ids_parameter_type form-control\">\n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default CaveatInput1Verification","import React from \"react\"\n\nconst CaveatInputVerification = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let Verification_caveat_head_parameter_Id = `Verification_caveat_head_parameter-${idx}`, Verification_caveat_head_parameter_type_Id = `Verification_caveat_head_parameter_type-${idx}`;\n\n            return (\n\n\n                <div key={idx} className=\"col-3\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`parameter h${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"head's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={Verification_caveat_head_parameter_Id}\n                                    data-id={idx}\n                                    id={Verification_caveat_head_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"verification_caveat_head_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={Verification_caveat_head_parameter_type_Id}\n                                    data-id={idx}\n                                    id={Verification_caveat_head_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"verification_caveat_head_parameter_type form-control\"\n                                >                                           \n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default CaveatInputVerification","import React from \"react\"\n\nconst FactParamInputVerification = (props) => {\n    return (\n        props.rules.map((val, idx) => {\n            let verification_fact_parameter_Id = `verification_fact_parameter-${idx}`, verification_fact_parameter_type_Id = `verification_fact_parameter_type-${idx}`;\n\n            return (\n\n\n                <div key={idx} className=\"col-3\">\n                    <div className=\"row\">\n\n                        <div className=\"col-6 mr-3\">\n                            <div className=\"row\">\n                                <label >{`parameter h${idx+1} `}</label>\n\n                            </div>\n                            <div className=\"row\">\n                                <textarea label=\"fact's parameter\" variant=\"outlined\"\n                                    type=\"text\"\n                                    name={verification_fact_parameter_Id}\n                                    data-id={idx}\n                                    id={verification_fact_parameter_Id}\n                                    value={props.rules[idx].param}\n                                    className=\"verification_fact_parameter form-control\"\n                                />\n                            </div>\n\n\n                        </div>\n                        <div className=\"col-0 mr-2 ml-2\">\n                            <div className=\"row\">\n                                <label >{`type `}</label>\n                            </div>\n                            <div className=\"row\">\n                                <select\n                                    type=\"text\"\n                                    name={verification_fact_parameter_type_Id}\n                                    data-id={idx}\n                                    id={verification_fact_parameter_type_Id}\n                                    value={props.rules[idx].type}\n                                    className=\"verification_fact_parameter_type form-control\"\n                                >                                           \n                                    <option selected disabled hidden  value=''>select type</option>\n                                    <option value=\"string\">string</option>\n                                    <option value=\"variable\">variable</option>\n                                    <option value=\"symbol\">symbol</option>\n                                    <option value=\"date\">date</option>\n                                    <option value=\"integer\">integer</option>\n                                </select>\n                            </div>\n\n\n                        </div>\n\n\n\n                    </div>\n                </div>\n\n\n\n            )\n        })\n\n    )\n}\nexport default FactParamInputVerification","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CaveatInput1Verification from \"./CaveatInput1Verification\"\nimport CaveatInputVerification from \"./CaveatInputVerification\"\nimport { IconButton } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport FactParamInputVerification from './FactInputVerification'\nimport ShowPredicateCaveat from './ShowPredicate_caveat'\n\nconst toHex = bytes =>\n    bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hexString =>\n    new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\nclass Debugger extends React.Component {\n    constructor() {\n        super();\n\n\n        this.state = {\n            token: [], token_example: [], token_verification: [], tokenToAttenuate: [], valueEncoded: '', valueDecoded: '', valueEncodedToAttenuate: '', valueDecodedToAttenuate: '', valueEncoded_example: '', valueEncoded_verification: '', valueDecoded_example: '', valueDecoded_verification: '',\n            privateKey: '', publicKey: '', privateKey_own_verification: '', publicKey_own_verification: '', attenuation_publicKey: '', attenuation_privateKey: '', restrict: '', resource: '',\n            expiration: '', restrict_verify: '', restrict_operation_message: '', resource_prefix_message: '', token_revocation_message: '', restrict_verify_example: '', resource_verify: ''\n            , resource_verify_example: '', seconds: '', result_verification: '', gen_err: '', gen_err_empty: '', gen_err_example: ''\n            , gen_err_attenuation: '', result_verification_example: '', message_encoded_verification: '', message_encoded_example: '',\n            message_encoded_attenuation: '', message_encoded: '', message_privateKey: '', message_privateKey_own_verification: '', message_privateKey_attenuation: '', copied:false,\n            //fact verification states\n            verification_fact_head_name: \"\", verification_fact_head_parameters: [{ param: \"\", type: \"\" }],\n            verification_facts: [{ fact_head_parameters: [{ param: \"\", type: \"\" }], fact_head_name: \"\" }],\n            verification_fact_adding_message: \"\", verification_fact_counter: 0, verification_number_of_added_fact: 0,\n            //caveat verification states\n            verification_caveat_head_parameter: [{ param: \"\", type: \"\" }], verification_caveat_ids_parameter: [{ param: \"\", type: \"\" }], verification_caveat_head_name: \"\", verification_caveat_ids_name: \"\",\n            verification_caveats: [{ head_parameter: [{ param: \"\", type: \"\" }], head_name: \"\", body: [] }],\n            verification_caveat_adding_message: \"\", verification_caveat_counter: 0, verification_number_of_added_caveats_head: 0, verification_number_of_added_caveats_ids: 0,\n            caveat_body: [], caveat_predicate_adding: \"\", caveat_idx: 1, caveat_hidden_msg_predicate: \"\", caveat_predicate_deleting: \"\"\n\n\n        }\n\n    }\n    componentDidMount() {\n        this.loadWasm();\n    }\n\n\n    loadWasm = async () => {\n        try {\n            const wasm = await import(\"biscuit-wasm\");\n\n            this.setState({ wasm, });\n\n        } catch (err) {\n            console.error(`Unexpected error in loadWasm. [Message: ${err.message}]`);\n        }\n    };\n    handleChange = (e) => {\n\n        if ([\"verification_caveat_head_parameter form-control\"].includes(e.target.className)) {\n            let verification_caveat_head_parameter = [...this.state.verification_caveat_head_parameter]\n            verification_caveat_head_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ verification_caveat_head_parameter: verification_caveat_head_parameter }, () => console.log(this.state.verification_caveat_head_parameter))\n        } else if ([\"verification_caveat_ids_parameter form-control\"].includes(e.target.className)) {\n            let verification_caveat_ids_parameter = [...this.state.verification_caveat_ids_parameter]\n            verification_caveat_ids_parameter[e.target.dataset.id].param = e.target.value\n            this.setState({ verification_caveat_ids_parameter: verification_caveat_ids_parameter }, () => console.log(this.state.verification_caveat_ids_parameter))\n        }\n        else if ([\"verification_caveat_ids_parameter_type form-control\"].includes(e.target.className)) {\n\n            let verification_caveat_ids_parameter = [...this.state.verification_caveat_ids_parameter]\n            verification_caveat_ids_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ verification_caveat_ids_parameter: verification_caveat_ids_parameter }, () => console.log(this.state.verification_caveat_ids_parameter))\n        }\n        else if ([\"verification_caveat_head_parameter_type form-control\"].includes(e.target.className)) {\n            let verification_caveat_head_parameter = [...this.state.verification_caveat_head_parameter]\n            verification_caveat_head_parameter[e.target.dataset.id].type = e.target.value\n            this.setState({ verification_caveat_head_parameter: verification_caveat_head_parameter }, () => console.log(this.state.verification_caveat_head_parameter))\n        }\n        else if ([\"verification_caveat_head_name form-control\"].includes(e.target.className)) {\n            this.setState({ verification_caveat_head_name: e.target.value }, () => console.log(this.state.verification_caveat_head_name))\n\n        }\n        else if ([\"verification_caveat_ids_name form-control\"].includes(e.target.className)) {\n            this.setState({ verification_caveat_ids_name: e.target.value }, () => console.log(this.state.verification_caveat_ids_name))\n        }\n\n        else if ([\"verification_fact_head_name form-control\"].includes(e.target.className)) {\n            this.setState({ verification_fact_head_name: e.target.value }, () => console.log(this.state.verification_fact_head_name))\n        }\n        else if ([\"verification_fact_parameter form-control\"].includes(e.target.className)) {\n            let verification_fact_head_parameters = [...this.state.verification_fact_head_parameters]\n            verification_fact_head_parameters[e.target.dataset.id].param = e.target.value\n            this.setState({ verification_fact_head_parameters: verification_fact_head_parameters }, () => console.log(this.state.verification_fact_head_parameters))\n        }\n        else if ([\"verification_fact_parameter_type form-control\"].includes(e.target.className)) {\n            let verification_fact_head_parameters = [...this.state.verification_fact_head_parameters]\n            verification_fact_head_parameters[e.target.dataset.id].type = e.target.value\n            this.setState({ verification_fact_head_parameters: verification_fact_head_parameters }, () => console.log(this.state.verification_fact_head_parameters))\n        }\n\n    }\n    handleChangee = (e) => {\n        let serialized = this.state.token;\n        let b64 = btoa(String.fromCharCode(...serialized));\n\n        this.setState({ valueEncoded: b64, valueDecoded: e.target.value });\n    }\n\n    handleChange1 = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token: token.toVec(), valueEncoded: e.target.value, valueDecoded: token.print(), message_encoded: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded: e.target.value })\n            this.setState({ message_encoded: \"Enter a valid token !\" })\n        }\n\n    }\n\n    handleChange_privateKey_own_verification = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n\n            this.setState({ message_privateKey_own_verification: \"\" })\n            let privkey = new Uint8Array(32);\n            let pubkey = new Uint8Array(32);\n            let decoded = fromHex(e.target.value);\n            let keypair = wasm.KeyPair.fromBytes(decoded);\n\n\n            let publicKey = keypair.publicKey();\n\n            keypair.toBytes(privkey);\n            publicKey.toBytes(pubkey);\n\n            this.setState({ privateKey_own_verification: toHex(privkey), publicKey_own_verification: toHex(pubkey) });\n        }\n        catch (err) {\n\n            this.setState({ privateKey_own_verification: e.target.value })\n\n            this.setState({ message_privateKey_own_verification: \"enter a valid key !\" })\n        }\n\n    }\n\n\n    handleChange1_verification = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_encoded_verification: \"\" })\n\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token_verification: token.toVec(), valueEncoded_verification: e.target.value, valueDecoded_verification: token.print(), message_encoded_verification: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded_verification: e.target.value })\n            this.setState({ message_encoded_verification: \"Enter a valid token !\" })\n        }\n\n    }\n\n\n\n    addFactVerification = (e) => {\n        this.setState((prevState) => ({\n            verification_fact_head_parameters: [...prevState.verification_fact_head_parameters, { param: \"\", type: \"\" }], verification_number_of_added_fact: this.state.verification_number_of_added_fact + 1\n        }));\n    }\n\n    addCaveatAttenuation = (e) => {\n        this.setState((prevState) => ({\n            attenuation_caveat_head_parameter: [...prevState.attenuation_caveat_head_parameter, { param: \"\", type: \"\" }], attenuation_number_of_added_caveats_head: this.state.attenuation_number_of_added_caveats_head + 1\n        }));\n    }\n    addCaveat1Verification = (e) => {\n        this.setState((prevState) => ({\n            verification_caveat_ids_parameter: [...prevState.verification_caveat_ids_parameter, { param: \"\", type: \"\" }], verification_number_of_added_caveats_ids: this.state.verification_number_of_added_caveats_ids + 1\n        }));\n    }\n    delPredicate_caveat = async (e) => {\n        this.setState({ caveat_predicate_deleting: \"\" })\n        try {\n            console.log(\"in predicate caveat body\", this.state.caveat_body);\n\n\n            if (this.state.caveat_body.length === 0) {\n                throw (SyntaxError(\"You don't have any predicate to delete !\"))\n\n            }\n            else if (this.state.caveat_body.length === 1) {\n                this.setState({ caveat_body: [], caveat_predicate_deleting: \"Your last predicate has been deleted\", caveat_predicate_adding: \"\" })\n            }\n            else {\n                let n = [...this.state.caveat_body.splice(this.state.caveat_body.length - 1, 1)]\n                console.log(\"in predicate caveat body\", n);\n\n                this.setState((prevState) => ({\n\n                    caveat_body: [...n], caveat_predicate_deleting: \"Your last predicate has been deleted\", caveat_predicate_adding: \"\"\n\n                }));\n                await new Promise(r => setTimeout(r, 3000));\n                console.log(\"last caveat body\", this.state.caveat_body)\n\n            }\n        }\n        catch (e) {\n            this.setState({ caveat_predicate_deleting: e.message })\n        }\n    }\n    addPredicate_caveat = async (e) => {\n        this.setState({ caveat_predicate_adding: \"\" })\n        await new Promise(r => setTimeout(r, 500));\n        try {\n            for (let pas = 1; pas < this.state.verification_caveat_ids_parameter.length; pas++) {\n                if (this.state.verification_caveat_ids_name === \"\" || this.state.verification_caveat_ids_parameter[pas].param === \"\" || this.state.verification_caveat_ids_parameter[pas].type === \"\") {\n                    throw (SyntaxError(\"all predicate fields must be filled out\"))\n\n                }\n            }\n\n            if (this.state.caveat_body.length === 0) {\n\n                this.setState({\n                    caveat_body: [{ ids_name: this.state.verification_caveat_ids_name, caveat_ids_parameter: this.state.verification_caveat_ids_parameter }], verification_caveat_ids_name: \"\", verification_caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"your predicate has been added\", caveat_idx: this.state.caveat_idx + 1, caveat_hidden_msg_predicate: \"Your added predicates :\"\n\n\n\n                })\n                await new Promise(r => setTimeout(r, 1000));\n                console.log(\"caveat body\", this.state.caveat_body);\n\n            }\n            else {\n\n                this.setState((prevState) => ({\n\n                    caveat_body: [...prevState.caveat_body, { ids_name: this.state.verification_caveat_ids_name, caveat_ids_parameter: this.state.verification_caveat_ids_parameter }], caveat_ids_name: \"\", caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"your predicate has been added\", caveat_idx: this.state.caveat_idx + 1, caveat_hidden_msg_predicate: \"Your added predicates :\"\n                }));\n            }\n        }\n        catch (e) {\n            this.setState({ caveat_predicate_adding: e.message })\n        }\n    }\n    handleChange4 = (e) => {\n\n\n        this.setState({ resource_verify: e.target.value });\n    }\n    copy() {\n        this.setState({copied:true})\n        const el = this.textArea\n        el.select()\n        document.execCommand(\"copy\")\n    }\n    handleChange4_example = (e) => {\n\n\n        this.setState({ resource_verify_example: e.target.value });\n    }\n    handleChange5_example = (e) => {\n\n\n        this.setState({ restrict_verify_example: e.target.value });\n    }\n    handleChange5 = (e) => {\n\n\n        this.setState({ restrict_verify: e.target.value });\n    }\n    addCaveatVerification = (e) => {\n        this.setState((prevState) => ({\n            verification_caveat_head_parameter: [...prevState.verification_caveat_head_parameter, { param: \"\", type: \"\" }], verification_number_of_added_caveats_head: this.state.verification_number_of_added_caveats_head + 1\n        }));\n    }\n    render() {\n        const { wasm = {} } = this.state;\n        const btnText = this.state.copied ? 'Copied' : 'Copy to clipboard'\n\n\n\n        let verification_caveat_head_parameter = [...this.state.verification_caveat_head_parameter]\n        let verification_fact_head_parameters = [...this.state.verification_fact_head_parameters]\n        let verification_caveat_ids_parameter = [...this.state.verification_caveat_ids_parameter]\n\n        return (\n            <div>\n                {/* <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange}/> */}\n                <div className=\"container-fluid\">\n                    <div className=\"warning\">\n                        <div className=\"text-center\">\n                            <strong>Biscuitsec :</strong>\n\n                        Learn how the biscuit token works by interacting with it. For developers, the code of the application is available on our github\n                        </div>\n                    </div>\n\n                    <h1 className=\"mr-5 text-center\">Token Verification </h1>\n                    <br />\n                    <div className=\"ml-5\">In the verification process :\n                    <ul>\n                            <li>\n                                Ambient data like operation, resource, fact , etc must be added to the verifier in order to generate new facts\n\n                        </li>\n                            <li>\n                                You can add a rule to verify on the token\n                        </li>\n                        </ul>\n                    </div>\n                    <br />\n                    <div className=\"container-fluid mt-10\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>Public Key</h5></label>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea2\" type=\"text\" readOnly value={this.state.publicKey_own_verification} rows=\"2\" />\n                                </div>\n\n\n\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label className=\"exampleFormControlTextarea1\"><h5>Private Key</h5></label><small> paste your private key here</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" type=\"text\" value={this.state.privateKey_own_verification} onChange={this.handleChange_privateKey_own_verification} rows=\"2\" />\n                                </div>\n                                <div>{\n                                    this.state.message_privateKey_own_verification}</div>\n\n                            </div>\n\n                        </div>\n\n                    </div>\n                    <br />\n                    <div className=\"container-fluid mt-10\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"textarea-container\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>ENCODED</h5></label><small> paste a token to verify here</small>\n                                    <textarea ref={(textarea) => this.textArea = textarea}  className=\"form-control\" id=\"exampleFormControlTextarea2\" type=\"text\" value={this.state.valueEncoded_verification} onChange={this.handleChange1_verification} rows=\"15\" />\n                                    <a onClick={() => this.copy()}>{btnText}</a>\n\n                                </div>\n                                <div>{this.state.message_encoded_verification}</div>\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label htmlFor=\"exampleFormControlTextarea1\"><h5>DECODED</h5></label><small> your result</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" readOnly type=\"text\" value={this.state.valueDecoded_verification} rows=\"15\" />\n                                </div>\n\n\n                            </div>\n                        </div>\n                    </div>\n                    <br />\n                    <h2 className=\"mr-5 ml-5\">Example of Token Verification </h2>\n                    <div className=\"mr-5 ml-5\">This example illustrates a token verification , the verifier will verify if the user has the right to do the operation on the resource he specified. </div>\n                    <div className=\"mr-5 ml-5\">For more details click <a href=\"https://www.w3schools.com/\">here</a></div>\n\n                    {/* <div className=\"container-fluid mt-10\">\n                                    <div className=\"col-10\">\n                                    <pre style={mystyle}>{`let verifier = new wasm.Verifier()\n//adding ambient data\n//add the resource to the verifier\nverifier.addResource(resource);\n//add the operation to the verifier\nverifier.addOperation(operation);\n//adding a rule to verify\n//this rule will verify if the token holder has the right to do the operation on the resource he specified in the playground\nlet rule = wasm.rule(\n        \"check_right\",\n        [\n             { variable: 0 },\n             { variable: 1 }\n        ],\n        [\n             {\n                name: \"resource\",\n                ids: [{ symbol: \"ambient\" }, { variable: 0 }]\n             },\n             {\n                name: \"operation\",\n                ids: [{ symbol: \"ambient\" }, { variable: 1 }]\n             },\n             {\n                name: \"right\",\n                ids: [{ symbol: \"authority\" }, { variable: 0 }, { variable: 1 }]\n             }\n        ]\n                    );\n//adding the rule to verify\nverifier.addCaveat(rule);\n//reconstructing the keypair from the hexadicimal private key\nlet keypair = wasm.KeyPair.fromBytes(fromHex(privateKey));\n//verification of the token\nlet result = verifier.verify(keypair.publicKey(), token);`}</pre>\n                    \n                                    </div>\n                    </div>\n                    <div className=\"ml-5\">You Can try the verification with our example of token for file management in the page Token Generation  \n                    </div>   \n                    <br /> */}\n                    <div className=\"container-fluid mt-10\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>Resource</h5></label>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea2\" type=\"text\" value={this.state.resource_verify_example} placeholder=\"/apps/123\" onChange={this.handleChange4_example} rows=\"1\" />\n                                </div>\n\n\n\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label className=\"exampleFormControlTextarea1\"><h5>Operation to verify on the resource</h5></label>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" type=\"text\" value={this.state.restrict_verify_example} placeholder=\"read\" onChange={this.handleChange5_example} rows=\"1\" />\n                                </div>\n                                <button\n                                    onClick={async () => {\n\n                                        try {\n                                            if (this.state.valueEncoded_verification === '') {\n                                                throw SyntaxError(\"You must enter the token to verify\")\n                                            }\n                                            else if (this.state.privateKey_own_verification === \"\") {\n                                                throw SyntaxError(\"You must enter your private key\")\n\n                                            }\n                                            let data = new Uint8Array(atob(this.state.valueEncoded_verification).split(\"\").map(function (c) {\n                                                return c.charCodeAt(0);\n                                            }));\n                                            let token = wasm.Biscuit.from(data);\n                                            let verifier = new wasm.Verifier()\n                                            verifier.addResource(this.state.resource_verify_example);\n                                            verifier.addOperation(this.state.restrict_verify_example);\n                                            verifier.setTime((new Date().getTime() / 1000).toFixed(0));\n                                            let rule = wasm.rule(\n                                                \"check_right\",\n                                                [\n                                                    { variable: 0 },\n                                                    { variable: 1 }\n                                                ],\n                                                [\n                                                    {\n                                                        name: \"resource\",\n                                                        ids: [{ symbol: \"ambient\" }, { variable: 0 }]\n                                                    },\n                                                    {\n                                                        name: \"operation\",\n                                                        ids: [{ symbol: \"ambient\" }, { variable: 1 }]\n                                                    },\n                                                    {\n                                                        name: \"right\",\n                                                        ids: [{ symbol: \"authority\" }, { variable: 0 }, { variable: 1 }]\n                                                    }\n                                                ]\n                                            );\n\n                                            verifier.addCaveat(rule);\n\n                                            let keypair = wasm.KeyPair.fromBytes(fromHex(this.state.privateKey_own_verification));\n\n                                            try {\n                                                let result = verifier.verify(keypair.publicKey(), token);\n                                                this.setState({ result_verification_example: \"OK\" });\n                                            } catch (error) {\n                                                this.setState({ result_verification_example: \"FAILED\" });\n                                            }\n\n                                        }\n                                        catch (e) {\n                                            this.setState({ result_verification_example: e.message });\n                                        }\n\n\n\n\n\n                                    }}>\n                                    Verify Your Token\n                                </button>\n                                <div className=\"verification\">\n                                    {this.state.result_verification_example}\n                                </div>\n                            </div>\n\n                        </div>\n\n\n                    </div>\n                    <br />\n                    <h2 className=\"mr-5 ml-5\">Set Your Own Token Verification </h2>\n                    <br />\n                    <div className=\"ml-5\">You can add opeartion,resource,fact or rule to be verified on your token</div>\n                    <br />\n                    <div className=\"container-fluid mt-10\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h3>Add Ambient Data</h3></label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"ml-5 mr-5\">The ambient data is the information on the resources , operations the verifier provide before the verification </div>\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>Resource</h5></label>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea2\" type=\"text\" value={this.state.resource_verify} placeholder=\"car1\" onChange={this.handleChange4} rows=\"1\" />\n                                </div>\n\n\n\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label className=\"exampleFormControlTextarea1\"><h5>Operation to verify on the resource</h5></label>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" type=\"text\" value={this.state.restrict_verify} placeholder=\"drive\" onChange={this.handleChange5} rows=\"1\" />\n                                </div>\n\n\n                            </div>\n\n\n                        </div>\n                        <br />\n                    </div>\n                    <div className=\"container-fluid mt-10\" onChange={this.handleChange}>\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <label className=\"exampleFormControlTextarea1\"><h5>Fact</h5></label>\n\n                            </div>\n                        </div>\n                        <div className=\"ml-5\">Ambient facts can only be provided by the verifier, and are represented by the #ambient symbol as the first element of a fact. They indicate data related to the operation the token is authorizing</div>\n                        <br />\n                        <div className=\"row\">\n\n                            <div className=\"col-1 mr-2 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`fact name `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.verification_fact_head_name}\n                                        className=\"verification_fact_head_name form-control\"\n                                        id=\"verification-fact-head-name\"\n                                        row=\"1\"\n\n                                    />\n\n                                </div>\n                            </div>\n\n                            <FactParamInputVerification rules={verification_fact_head_parameters}\n                                type=\"text\"\n\n                            />\n                            <div className=\"col-0 mr-3 \">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\">\n\n                                    <IconButton onClick={this.addFactVerification} >\n                                        < AddCircleIcon />\n                                    </IconButton>\n\n                                </div>\n                            </div>\n\n                        </div>\n\n\n\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n                            <div className=\"col-0 mr-1 \">\n                                <button className=\"col-12\" onClick={async () => {\n                                     \n                                    try {\n                                        this.setState({ verification_fact_adding_message: '' })\n                                        for (let pas = 0; pas < this.state.verification_fact_head_parameters.length; pas++) {\n                                            if (this.state.verification_fact_head_name === \"\" || this.state.verification_fact_head_parameters[pas].param === \"\" || this.state.verification_fact_head_parameters[pas].type === \"\") {\n                                                throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n    \n                                            }\n                                        }\n                                        if (this.state.verification_fact_counter === 0) {\n                                            console.log(\"number of facts\", this.state.verification_number_of_added_fact);\n                                       \n                                            this.setState({\n                                                verification_facts: [{ fact_head_parameters: this.state.verification_fact_head_parameters, fact_head_name: this.state.verification_fact_head_name, }]\n                                            });\n                                        }\n                                        else {\n                                            \n                                            this.setState((prevState) => ({\n                                                verification_facts: [...prevState.verification_facts, { fact_head_parameters: this.state.verification_fact_head_parameters, fact_head_name: this.state.verification_fact_head_name, }]\n                                            }));\n                                        }\n\n                                        this.setState({ verification_fact_adding_message: \"Your new fact has been added\" });\n\n                                        this.setState({ verification_fact_counter: this.state.verification_fact_counter + 1 })\n                                        this.setState({ verification_fact_head_name: \"\", verification_fact_head_parameters: [{ param: \"\", type: \"\" }] })\n\n\n                                    }\n                                    catch (e) {\n\n                                        this.setState({ verification_fact_adding_message: e.message })\n\n                                    }\n                                }}>add fact</button>\n                            </div>\n                            <div className=\"col-2 ml-3\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        this.setState({\n\n\n\n                                            verification_fact_head_name: \"\", verification_fact_head_parameters: [{ param: \"\", type: \"\" }],\n                                            \n                                            verification_fact_adding_message: \"\", \n                                        })\n\n\n\n\n\n                                    }}>Reset fact</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n\n                            <div className=\"col-2 mr-2 ml-5\">\n                                <div id=\"verification_fact_adding_result\">{this.state.verification_fact_adding_message}</div>\n\n                            </div>\n                        </div>\n                        <br />\n                        <div className=\"row\">\n\n                            <div className=\"col-5 ml-5\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h3>Add a Rule to verify</h3></label>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"ml-5\">Add a rule to verify on your token . for example if we set this rule : <pre>{`\n                            rule(\n                                \"right\",//head name\n                                [{ symbol: \"right\" }],//head parameter\n                                [\n                                    {\n                                        name: \"right\",//ids name\n                                        ids: [{ symbol: \"authority\" }, { string:room1 }, { symbol: \"open\" }]//ids paramter\n                                    }\n                                ]\n                            )\n\n                            `}</pre> The verifier will verify if the token holder has the authority right to open the room1</div>\n                        <br />\n                        <div className=\"ml-5\"><h4>Header</h4></div>\n\n                        <div className=\"row\">\n\n                            <div className=\"col-1 mr-2 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`head name `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.verification_caveat_head_name}\n                                        className=\"verification_caveat_head_name form-control\"\n                                        id=\"head-name\"\n                                        row=\"1\"\n\n                                    />\n\n                                </div>\n                            </div>\n\n                            <CaveatInputVerification rules={verification_caveat_head_parameter}\n\n                            />\n                            <div className=\"col-0 mr-3 \">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\">\n\n                                    <IconButton onClick={this.addCaveatVerification} >\n                                        < AddCircleIcon />\n                                    </IconButton>\n\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"ml-5\"><h4>Body</h4></div>\n                        <h5 className=\"ml-5\">{this.state.caveat_hidden_msg_predicate}</h5>\n\n                        <ShowPredicateCaveat predicates={this.state.caveat_body} />\n                        <div className=\"row\">\n                            <div className=\"col-1 ml-5\">\n                                <div className=\"row\">\n                                    <label >{`pid${this.state.caveat_idx} `}</label>\n                                </div>\n                                <div className=\"row\">\n\n                                    <textarea id=\"outlined-basic\" label=\"ids\" variant=\"outlined\"\n                                        type=\"text\"\n                                        value={this.state.verification_caveat_ids_name}\n                                        className=\"verification_caveat_ids_name form-control\"\n                                    />\n\n                                </div>\n                            </div>\n\n                            <CaveatInput1Verification rules={verification_caveat_ids_parameter} caveat_idx={this.state.caveat_idx}\n\n\n\n                            />\n                            <div className=\"col-0 mr-2\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n                                    <h3>\n                                        <IconButton onClick={this.addCaveat1Verification} >\n                                            < AddCircleIcon />\n                                        </IconButton>\n                                    </h3>\n\n\n                                </div>\n                            </div>\n\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n                                    <button onClick={this.addPredicate_caveat} >\n                                        add predicate\n                                        </button>\n                                    <div>{this.state.caveat_predicate_adding}</div>\n\n\n\n                                </div>\n                            </div>\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <br /> <br />\n                                </div>\n                                <div className=\"row\" >\n\n\n                                    <button onClick={this.delPredicate_caveat} >\n                                        Delete last predicate\n                                    </button>\n                                    <div>{this.state.caveat_predicate_deleting}</div>\n\n\n\n\n                                </div>\n                            </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        </div>\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-0 \">\n                                <button onClick={async () => {\n                                    try {\n\n                                        // for (let pas = 0; pas < this.state.verification_number_of_added_caveats_head + 1; pas++) {\n                                        //     if (this.state.verification_caveat_head_name === \"\" || this.state.verification_caveat_head_parameter[pas].param === \"\" || this.state.verification_caveat_head_parameter[pas].type === \"\") {\n                                        //         throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                        //     }\n                                        // }\n                                        // for (let pas = 0; pas < this.state.verification_number_of_added_caveats_ids + 1; pas++) {\n                                        //     if (this.state.verification_caveat_ids_name === \"\" || this.state.verification_caveat_ids_parameter[pas].param === \"\" || this.state.verification_caveat_ids_parameter[pas].type === \"\") {\n                                        //         throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                        //     }\n                                        // }\n                                        this.setState({ verification_caveat_adding_message: '' })\n                                        for (let pas = 0; pas < this.state.verification_caveat_head_parameter.length; pas++) {\n                                            if (this.state.verification_caveat_head_name === \"\" || this.state.verification_caveat_head_parameter[pas].param === \"\" || this.state.verification_caveat_head_parameter[pas].type === \"\") {\n                                                throw (SyntaxError(\"Incomplete data: all fields must be filled out\"))\n\n                                            }\n                                        }\n                                        if (this.state.caveat_body.length === 0) {\n                                            throw (SyntaxError(\"You must at least add one predicate !\"))\n                                        }\n\n                                        if (this.state.verification_caveat_counter === 0) {\n\n\n                                            this.setState({\n                                                verification_caveats: [{ head_parameter: this.state.verification_caveat_head_parameter, head_name: this.state.verification_caveat_head_name, body: this.state.caveat_body }]\n                                            });\n                                        }\n                                        else {\n\n                                            this.setState((prevState) => ({\n                                                verification_caveats: [...prevState.verification_caveats, { head_parameter: this.state.verification_caveat_head_parameter, ids_parameter: this.state.verification_caveat_ids_parameter, head_name: this.state.verification_caveat_head_name, ids_name: this.state.verification_caveat_ids_name }]\n                                            }));\n                                        }\n                                        this.setState({ verification_caveat_adding_message: \"Your new rule has been added\" });\n\n                                        this.setState({ verification_caveat_counter: this.state.verification_caveat_counter + 1 })\n                                        this.setState({ verification_caveat_head_name: \"\", verification_caveat_head_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"\", body: [], caveat_body: [], caveat_idx: 1 })\n\n                                        await new Promise(r => setTimeout(r, 2000));\n                                        console.log(this.state.verification_caveats)\n\n                                    }\n                                    catch (e) {\n                                        this.setState({ verification_caveat_adding_message: e.message })\n                                    }\n\n\n                                }}>add rule</button>\n                            </div>\n\n\n                            <div className=\"col-1 ml-1\">\n                                <div className=\"row\">\n                                    <button onClick={async () => {\n                                        this.setState({\n\n\n                                            verification_caveat_head_parameter: [{ param: \"\", type: \"\" }], verification_caveat_ids_parameter: [{ param: \"\", type: \"\" }], verification_caveat_head_name: \"\", verification_caveat_ids_name: \"\",\n                                            verification_caveat_adding_message: \"\",\n                                            caveat_body: [], caveat_predicate_adding: \"\", caveat_idx: 1, caveat_hidden_msg_predicate: \"\", caveat_predicate_deleting: \"\"\n\n                                        })\n\n\n\n\n\n                                    }}>Reset rule</button>\n                                </div>\n                            </div>\n                        </div>\n\n\n                        <div className=\"row\">\n                            <div className=\"col-1\"></div>\n\n                            <div className=\"col-2 mr-2 \">\n                                <div id=\"verification_caveat_adding_result\">{this.state.verification_caveat_adding_message}</div>\n\n                            </div>\n                        </div>\n\n                        <br /> <br />\n\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-4\"></div>\n                            <div className=\"col-2 ml-5\">\n                                <button\n                                    onClick={async () => {\n                                        try {\n                                            if (this.state.valueEncoded_verification === '') {\n                                                throw SyntaxError(\"You must enter the token to verify\")\n                                            }\n                                            else if (this.state.privateKey_own_verification === \"\") {\n                                                throw SyntaxError(\"You must enter your private key\")\n\n                                            }\n\n                                            let data = new Uint8Array(atob(this.state.valueEncoded_verification).split(\"\").map(function (c) {\n                                                return c.charCodeAt(0);\n                                            }));\n                                            let token = wasm.Biscuit.from(data);\n                                            let verifier = new wasm.Verifier()\n                                            verifier.addResource(this.state.resource_verify);\n\n                                            verifier.addOperation(this.state.restrict_verify);\n                                            console.log(\"caveat counter :\", this.state.verification_caveat_counter);\n                                            if (this.state.verification_caveat_counter > 0) {\n                                                for (let pas = 0; pas < this.state.verification_caveats.length; pas++) {\n                                                    console.log(\"step {}\", pas);\n                                                    let head_parameter1 = [...this.state.verification_caveats[pas].head_parameter];\n                                                    let head_parameter = [];\n                                                    for (let pas1 = 0; pas1 < head_parameter1.length; pas1++) {\n                                                        if (head_parameter1[pas1].type === \"variable\") {\n                                                            head_parameter = [...head_parameter, { variable: parseInt(head_parameter1[pas1].param) }]\n                                                        }\n                                                        else if (head_parameter1[pas1].type === \"string\") {\n                                                            head_parameter = [...head_parameter, { string: head_parameter1[pas1].param }]\n                                                        }\n                                                        else if (head_parameter1[pas1].type === \"symbol\") {\n                                                            head_parameter = [...head_parameter, { symbol: head_parameter1[pas1].param }]\n                                                        }\n                                                        else if (head_parameter1[pas1].type === \"integer\") {\n                                                            head_parameter = [...head_parameter, { integer: parseInt(head_parameter1[pas1].param) }]\n                                                        }\n                                                        else if (head_parameter1[pas1].type === \"date\") {\n                                                            head_parameter = [...head_parameter, { date: Date.parse(head_parameter1[pas1].param) }]\n                                                        }\n                                                    }\n                                                    // console.log(head_parameter)\n                                                    let body = [...this.state.verification_caveats[pas].body];\n                                                    let body_for_rule = [];\n                                                    for (let pas1 = 0; pas1 < body.length; pas1++) {\n                                                        let ids_name = body[pas1].ids_name\n                                                        let ids_parameters = [...body[pas1].caveat_ids_parameter]\n                                                        let ids_parameter_for_rule = []\n                                                        for (let pas2 = 0; pas2 < ids_parameters.length; pas2++) {\n                                                            if (ids_parameters[pas2].type === \"variable\") {\n                                                                ids_parameter_for_rule = [...ids_parameter_for_rule, { variable: parseInt(ids_parameters[pas2].param) }]\n                                                            }\n                                                            else if (ids_parameters[pas2].type === \"string\") {\n                                                                ids_parameter_for_rule = [...ids_parameter_for_rule, { string: ids_parameters[pas2].param }]\n                                                            }\n                                                            else if (ids_parameters[pas2].type === \"symbol\") {\n                                                                ids_parameter_for_rule = [...ids_parameter_for_rule, { symbol: ids_parameters[pas2].param }]\n                                                            }\n                                                            else if (ids_parameters[pas2].type === \"integer\") {\n                                                                ids_parameter_for_rule = [...ids_parameter_for_rule, { integer: parseInt(ids_parameters[pas2].param) }]\n                                                            }\n                                                            else if (ids_parameters[pas2].type === \"date\") {\n                                                                ids_parameter_for_rule = [...ids_parameter_for_rule, { date: Date.parse(ids_parameters[pas2].param) }]\n                                                            }\n                                                        }\n                                                        body_for_rule = [...body_for_rule, {\n                                                            name: ids_name,\n                                                            ids: ids_parameter_for_rule\n                                                        }]\n                                                    }\n                                                    console.log(\"body_for_rule\", body_for_rule);\n\n\n                                                    let rule = wasm.rule(\n                                                        this.state.verification_caveats[pas].head_name,\n                                                        head_parameter,\n                                                        body_for_rule\n                                                    )\n                                                    verifier.addCaveat(rule);\n                                                }\n                                            }\n\n                                            console.log(\"fact counter :\", this.state.verification_fact_counter);\n                                            if (this.state.verification_fact_counter > 0) {\n                                                console.log(\"verification facts\", this.state.verification_facts)\n                                                for (let pas = 0; pas < this.state.verification_facts.length; pas++) {\n\n                                                    let fact_parameter1 = [...this.state.verification_facts[pas].fact_head_parameters];\n                                                    let fact_parameter = [];\n                                                    for (let pas1 = 0; pas1 < fact_parameter1.length; pas1++) {\n                                                        if (fact_parameter1[pas1].type === \"variable\") {\n                                                            fact_parameter = [...fact_parameter, { variable: parseInt(fact_parameter1[pas1].param) }]\n                                                        }\n                                                        else if (fact_parameter1[pas1].type === \"string\") {\n                                                            fact_parameter = [...fact_parameter, { string: fact_parameter1[pas1].param }]\n                                                        }\n                                                        else if (fact_parameter1[pas1].type === \"symbol\") {\n                                                            fact_parameter = [...fact_parameter, { symbol: fact_parameter1[pas1].param }]\n                                                        }\n                                                        else if (fact_parameter1[pas1].type === \"integer\") {\n                                                            fact_parameter = [...fact_parameter, { integer: parseInt(fact_parameter1[pas1].param) }]\n                                                        }\n                                                        else if (fact_parameter1[pas1].type === \"date\") {\n                                                            fact_parameter = [...fact_parameter, { date: Date.parse(fact_parameter1[pas1].param) }]\n                                                        }\n                                                    }\n                                                    console.log(\"fact parameter for verification\", fact_parameter)\n                                                    let fact = wasm.fact(\n                                                        this.state.verification_facts[pas].fact_head_name,\n                                                        fact_parameter,\n\n                                                    )\n                                                    verifier.addFact(fact);\n\n\n\n                                                }\n\n\n                                            }\n\n\n                                            let keypair = wasm.KeyPair.fromBytes(fromHex(this.state.privateKey_own_verification));\n                                            try {\n                                                let result = verifier.verify(keypair.publicKey(), token);\n                                                this.setState({ result_verification: \"OK\" });\n                                            }\n                                            catch (error) {\n                                                this.setState({ result_verification: \"Failed\" });\n\n                                            }\n                                        }\n                                        catch (e) {\n                                            this.setState({ result_verification: e.message });\n                                        }\n\n\n\n                                    }}>\n                                    Verify Your Token\n                                </button>\n                                <div className=\"verification\">\n                                    {this.state.result_verification}\n                                </div>\n                            </div>\n                        </div>\n\n\n                    </div>\n\n\n                </div>\n\n            </div >\n\n        )\n    }\n}\nexport default Debugger;\n\n\n","import React from 'react'\nimport { SocialIcon } from 'react-social-icons';\n\nfunction Footer() {\n\n    return (\n\n\n        <footer className=\"page-footer footer font-small  pt-4 bg-blue\">\n\n            <div className=\"container text-center text-md-left\">\n                <div className=\"row\">\n                    <div className=\"col-md-6 mt-md-0 mt-3\">\n                        <h5 className=\"text-uppercase\">Biscuitsec playground</h5>\n                        <p>Supported by <a style={{color:\"#D1A26A\"}}href=\"https://acert.io\">acert.io</a> </p>\n                    </div>\n                    <hr className=\"clearfix w-100 d-md-none pb-3\" />\n                    <div className=\"col-md-3 mb-md-0 mb-3\">\n\n                    </div>\n                    <div className=\"col-md-1 mb-md-0 mb-3 ml-5\">\n\n                        <ul className=\"list-unstyled\">\n                            <li>\n                                <div className=\"col-md-1 mb-md-0 mb-3\">\n                                    <ul className=\"list-unstyled\">\n                                        <li>\n                                            <div >\n                                            <SocialIcon network=\"twitter\" url=\"https://twitter.com/acertHQ\"  />\n\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </li>\n\n                        </ul>\n                    </div>\n\n                </div>\n\n            </div>\n\n            <div className=\"footer-copyright text-center py-3\">© 2020 Copyright\n        <a href=\"to_be_defined\"> biscuitsec</a>\n            </div>\n\n        </footer>\n\n    );\n\n}\nexport default Footer;","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst toHex = bytes =>\n    bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hexString =>\n    new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\nclass TokenGen extends React.Component {\n    constructor() {\n        super();\n\n\n        this.state = {\n            token: [], token_example: [], token_verification: [], tokenToAttenuate: [], valueEncoded: '', valueDecoded: '', valueEncodedToAttenuate: '', valueDecodedToAttenuate: '', valueEncoded_example: '', valueEncoded_verification: '', valueDecoded_example: '', valueDecoded_verification: '',\n            privateKey: '', publicKey: '', privateKey_own_verification: '', publicKey_own_verification: '', attenuation_publicKey: '', attenuation_privateKey: '', restrict: '', resource: '',\n            expiration: '', restrict_verify: '', restrict_operation_message: '', resource_prefix_message: '', token_revocation_message: '', restrict_verify_example: '', resource_verify: ''\n            , resource_verify_example: '', seconds: '', result_verification: '', gen_err: '', gen_err_empty: '', gen_err_example: ''\n            , gen_err_attenuation: '', result_verification_example: '', message_encoded_verification: '', message_encoded_example: '',\n            message_encoded_attenuation: '', message_encoded: '', message_privateKey: '', message_privateKey_own_verification: '', message_privateKey_attenuation: '',\n            copied:false,\n\n        }\n\n    }\n    componentDidMount() {\n        this.loadWasm();\n    }\n    // componentDidUpdate(){\n    //     setTimeout(() => this.setState({rule_adding_message:'',caveat_adding_message :'',fact_adding_message:''}), 10000);\n    //   }\n    loadWasm = async () => {\n        try {\n            const wasm = await import(\"biscuit-wasm\");\n\n            this.setState({ wasm, });\n\n        } catch (err) {\n            console.error(`Unexpected error in loadWasm. [Message: ${err.message}]`);\n        }\n    };\n\n    handleChangee = (e) => {\n        let serialized = this.state.token;\n        let b64 = btoa(String.fromCharCode(...serialized));\n\n        this.setState({ valueEncoded: b64, valueDecoded: e.target.value });\n    }\n\n    handleChange1 = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token: token.toVec(), valueEncoded: e.target.value, valueDecoded: token.print(), message_encoded: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded: e.target.value })\n            this.setState({ message_encoded: \"Enter a valid token !\" })\n        }\n\n    }\n    handleChange_privateKey = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_privateKey: \"\" })\n\n            let privkey = new Uint8Array(32);\n            let pubkey = new Uint8Array(32);\n            let decoded = fromHex(e.target.value);\n            let keypair = wasm.KeyPair.fromBytes(decoded);\n\n\n            let publicKey = keypair.publicKey();\n\n            keypair.toBytes(privkey);\n            publicKey.toBytes(pubkey);\n\n            this.setState({ privateKey: toHex(privkey), publicKey: toHex(pubkey) });\n        }\n        catch (err) {\n\n            this.setState({ privateKey: e.target.value })\n\n            this.setState({ message_privateKey: \"enter a valid key !\" })\n        }\n    }\n\n    handleChangee_example = (e) => {\n        let serialized = this.state.token_example;\n        let b64 = btoa(String.fromCharCode(...serialized));\n\n        this.setState({ valueEncoded_example: b64, valueDecoded_example: e.target.value });\n    }\n    handleChange1_example = (e) => {\n        const { wasm = {} } = this.state;\n        try {\n            this.setState({ message_encoded_example: \"\" })\n\n            let data = new Uint8Array(atob(e.target.value).split(\"\").map(function (c) {\n                return c.charCodeAt(0);\n            }));\n            let token = wasm.Biscuit.from(data);\n            this.setState({ token_example: token.toVec(), valueEncoded_example: e.target.value, valueDecoded_example: token.print(), message_encoded_example: \"\" });\n        }\n        catch (err) {\n            this.setState({ valueEncoded_example: e.target.value })\n            this.setState({ message_encoded_example: \"Enter a valid token !\" })\n        }\n\n    }\n    copy() {\n        this.setState({copied:true})\n        const el = this.textArea\n        el.select()\n        document.execCommand(\"copy\")\n    }\n    handleChange2 = (e) => {\n\n\n        this.setState({ restrict: e.target.value });\n    }\n    handleChange3 = (e) => {\n\n\n        this.setState({ resource: e.target.value });\n    }\n\n    handleChange4 = (e) => {\n\n\n        this.setState({ resource_verify: e.target.value });\n    }\n    handleChange4_example = (e) => {\n\n\n        this.setState({ resource_verify_example: e.target.value });\n    }\n\n    handleChange5_example = (e) => {\n\n\n        this.setState({ restrict_verify_example: e.target.value });\n    }\n    handleChange5 = (e) => {\n\n\n        this.setState({ restrict_verify: e.target.value });\n    }\n    handleChange6 = (e) => {\n\n\n        this.setState({ seconds: e.target.value });\n    }\n    addPredicate_rule = async (e) => {\n        this.setState({ rule_predicate_adding: \"\" })\n        await new Promise(r => setTimeout(r, 500));\n\n        if (this.state.rule_body.length === 0) {\n            this.setState({\n                rule_body: [{ ids_name: this.state.ids_name, rule_ids_parameter: this.state.ids_parameter }], ids_name: \"\", ids_parameter: [{ param: \"\", type: \"\" }], rule_predicate_adding: \"your predicate has been added\", rule_idx: this.state.rule_idx + 1\n\n            })\n            await new Promise(r => setTimeout(r, 1000));\n\n        }\n        else {\n            this.setState((prevState) => ({\n\n                rule_body: [...prevState.rule_body, { ids_name: this.state.ids_name, rule_ids_parameter: this.state.ids_parameter }], ids_name: \"\", ids_parameter: [{ param: \"\", type: \"\" }], rule_predicate_adding: \"your predicate has been added\", rule_idx: this.state.rule_idx + 1\n\n\n            }));\n        }\n        await new Promise(r => setTimeout(r, 1000));\n\n        console.log(\"rule body\", this.state.rule_body);\n        console.log(\"rule_idx\", this.state.rule_idx);\n\n    }\n    addPredicate_caveat = async (e) => {\n        this.setState({ caveat_predicate_adding: \"\" })\n        await new Promise(r => setTimeout(r, 500));\n\n        if (this.state.caveat_body.length === 0) {\n            this.setState({\n                caveat_body: [{ ids_name: this.state.caveat_ids_name, caveat_ids_parameter: this.state.caveat_ids_parameter }], caveat_ids_name: \"\", caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"your predicate has been added\", caveat_idx: this.state.caveat_idx + 1,\n\n            })\n            await new Promise(r => setTimeout(r, 1000));\n\n        }\n        else {\n            this.setState((prevState) => ({\n\n                caveat_body: [...prevState.caveat_body, { ids_name: this.state.caveat_ids_name, caveat_ids_parameter: this.state.caveat_ids_parameter }], caveat_ids_name: \"\", caveat_ids_parameter: [{ param: \"\", type: \"\" }], caveat_predicate_adding: \"your predicate has been added\", caveat_idx: this.state.caveat_idx + 1\n            }));\n        }\n        await new Promise(r => setTimeout(r, 1000));\n\n        console.log(\"caveat body\", this.state.caveat_body);\n    }\n    addFact = async (e) => {\n\n        this.setState((prevState) => ({\n            fact_head_parameters: [...prevState.fact_head_parameters, { param: \"\", type: \"\" }], number_of_added_fact: this.state.number_of_added_fact + 1\n        }));\n\n    }\n    addRule1_caveat = (e) => {\n        this.setState((prevState) => ({\n            caveat_ids_parameter: [...prevState.caveat_ids_parameter, { param: \"\", type: \"\" }], number_of_added_caveats_ids: this.state.number_of_added_caveats_ids + 1,\n        }));\n    }\n    addRule_caveat = (e) => {\n        this.setState((prevState) => ({\n            caveat_head_parameter: [...prevState.caveat_head_parameter, { param: \"\", type: \"\" }], number_of_added_caveats_head: this.state.number_of_added_caveats_head + 1,\n        }));\n    }\n\n    addRule1 = (e) => {\n        this.setState((prevState) => ({\n            ids_parameter: [...prevState.ids_parameter, { param: \"\", type: \"\" }], number_of_added_rules_ids: this.state.number_of_added_rules_ids + 1\n        }));\n    }\n    addRule = (e) => {\n        this.setState((prevState) => ({\n            head_parameter: [...prevState.head_parameter, { param: \"\", type: \"\" }], number_of_added_rules_head: this.state.number_of_added_rules_head + 1\n        }));\n    }\n\n    render() {\n        const { wasm = {} } = this.state;\n        const loadKeys = () => {\n            let decoded = fromHex(this.state.privateKey);\n            return wasm.KeyPair.fromBytes(decoded);\n        }\n        const btnText = this.state.copied ? 'Copied' : 'Copy to clipboard'\n\n\n\n\n\n        return (\n            <div>\n                {/* <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange}/> */}\n                <div className=\"container-fluid\">\n                    <section className=\"banner-biscuit mr-2\">\n                        <div className=\"container header\">\n                            <br />\n                            <a className=\"logo\" href=\"/\"><img src={require('./img/biscuitsec_logo.svg')} alt=\"logo\" /></a>\n                            <br />\n                            <a className=\"logo\" href=\"/\"><img src={require('./img/biscuitsec.svg')} alt=\"logo\" /></a>\n                            <h1 > playground </h1>\n\n                            {/* <p>Biscuit Web Tokens are an open, industry standard RFC xxxx method for representing claims securely between\n            two parties.</p>\n        <p>Biscuitsec.io allows you to decode,modify, verify and generate your web token .</p> */}\n                        </div>\n                    </section>\n                    <div className=\"warning\">\n                        <div className=\"text-center\">\n                            <strong>Biscuitsec :</strong>\n\n                        Learn how the biscuit token works by interacting with it. For developers, the code of the application is available on our github\n                        </div>\n                    </div>                    <h1 className=\"mr-5 text-center\">Token Example </h1>\n\n                    <br />\n                    <h2 className=\"mr-5 ml-5\">Root Keys Generation </h2>\n                    <div className=\"mr-5 ml-5\">Biscuits use public key cryptography. You can either use an existing public/private keypair, or we'll generate one for you.<br /> Please note this site does not record neither the provided keys nor the generated tokens. </div>\n                    <br />\n                    <div className=\"container-fluid mt-12\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleFormControlTextarea2\"><h5>Public Key</h5></label> <small> press the button to generate your keys</small>\n                                    <textarea  className=\"form-control\" id=\"exampleFormControlTextarea2\" type=\"text\" readOnly value={this.state.publicKey} rows=\"2\" />\n                                </div>\n\n\n\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"form-group brown-border-focus\">\n                                    <label className=\"exampleFormControlTextarea1\"><h5>Private Key</h5></label><small> if you wanna use your private key paste it here</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" type=\"text\" value={this.state.privateKey} onChange={this.handleChange_privateKey} rows=\"2\" />\n                                </div>\n                                <button\n                                    onClick={async () => {\n                                        this.setState({ message_privateKey: \"\" })\n\n                                        let privkey = new Uint8Array(32);\n                                        let pubkey = new Uint8Array(32);\n\n                                        let keypair = new wasm.KeyPair();\n                                        let publicKey = keypair.publicKey();\n\n                                        keypair.toBytes(privkey);\n                                        publicKey.toBytes(pubkey);\n\n                                        this.setState({ privateKey: toHex(privkey), publicKey: toHex(pubkey) });\n\n\n\n                                    }}>\n                                    Generate keys\n                                </button>\n                                <div>{this.state.message_privateKey}</div>\n\n                            </div>\n\n                        </div>\n\n                    </div>\n                    <br />\n                    <h2 className=\"ml-5\">Predefined token </h2>\n                    <div className=\"ml-5\">This predefined token illustrate an example of rental car agency management.<br /> To read the explanation and the code of this example click <a href=\"https://www.w3schools.com/\">here</a></div>\n                    <br />\n                    <div className=\"container-fluid mt-10\">\n                        <div className=\"row\">\n                            <div className=\"col-md-5 ml-5\">\n\n                                <div className=\"textarea-container\">\n                                    <label ><h5>ENCODED</h5></label>\n                                    <textarea className=\"form-control\" ref={(textarea) => this.textArea = textarea} id=\"exampleFormControlTextarea2\" readOnly value={this.state.valueEncoded_example} onChange={this.handleChange1_example} rows=\"15\" />\n                                    <a onClick={() => this.copy()}>{btnText}</a>\n\n                                </div>\n\n                                <div>{this.state.message_encoded_example}</div>\n                            </div>\n                            <div className=\"col-md-5 ml-5\">\n                                <div className=\"textarea-container\">\n                                    <label htmlFor=\"exampleFormControlTextarea1\"><h5>DECODED</h5></label><small> your result</small>\n                                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" readOnly type=\"text\" value={this.state.valueDecoded_example} onChange={this.handleChangee_example} rows=\"15\" />\n\n                                </div>\n                                    <br />\n                                <button\n                                    onClick={async () => {\n                                        this.setState({ gen_err_example: '' })\n                                        let builder = new wasm.Biscuit()\n\n\n                                        let fact = wasm.fact(\"right\", [\n                                            wasm.string(\"car1\"),\n                                            wasm.symbol(\"drive\")\n                                        ])\n                                        builder.addAuthorityFact(fact)\n\n                                        fact = wasm.fact(\"right\", [\n                                            { string: \"car2\" },\n                                            { symbol: \"drive\" }\n                                        ])\n                                        builder.addAuthorityFact(fact)\n                                        fact = wasm.fact(\"right\", [\n                                            { string: \"car3\" },\n                                            { symbol: \"drive\" }\n                                        ])\n                                        builder.addAuthorityFact(fact)\n                                        try {\n                                            let token = builder.build(loadKeys())\n                                            let serialized = token.toVec();\n                                            let b64 = btoa(String.fromCharCode(...serialized));\n\n                                            this.setState({ token_example: token.toVec(), valueEncoded_example: b64, valueDecoded_example: token.print() });\n                                        } catch (error) {\n                                            this.setState({ gen_err_example: \"You must generate your keypair before generating your token !\" });\n                                        }\n\n\n                                    }}>\n                                    Basic rights token\n                                </button>\n\n                                <div id=\"verification_result\">{this.state.gen_err_example}</div>\n\n                            </div>\n                        </div>\n\n                    </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                </div>\n\n\n\n\n\n\n\n            </div >\n        )\n    }\n}\nexport default TokenGen;\n\n\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport { Route, Redirect } from 'react-router-dom'\nimport NavBar from './NavBar'\nimport TokenGen from './TokenGen'\nimport TokenAtt from './TokenAtt'\nimport TokenVer from './TokenVer'\nimport Footer from './footer'\nimport start from './start'\nexport class App extends Component {\n  state = {\n\n  };\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        {/* <Header />  */}\n        <Route exact path=\"/\">\n          <Redirect to=\"/start\" />\n        </Route>\n        <Route exact path=\"/tokengen\" component={TokenGen} />\n        <Route exact path=\"/start\" component={start} />\n        <Route exact path=\"/tokenatt\" component={TokenAtt} />\n        <Route exact path=\"/tokenver\" component={TokenVer} />\n        <br />\n        {/* <Debugger /> */}\n\n\n        <br /> <br />\n        <Footer />\n\n\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n<BrowserRouter>\n<App />\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}