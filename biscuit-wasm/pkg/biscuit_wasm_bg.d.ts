/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_symboltable_free(a: number): void;
export function __wbg_blockbuilder_free(a: number): void;
export function blockbuilder_new(): number;
export function blockbuilder_addFact(a: number, b: number): void;
export function blockbuilder_addRule(a: number, b: number): void;
export function blockbuilder_addCaveat(a: number, b: number): void;
export function __wbg_biscuit_free(a: number): void;
export function biscuit_new(): number;
export function biscuit_from(a: number, b: number): number;
export function biscuit_fromSealed(a: number, b: number, c: number, d: number): number;
export function biscuit_toVec(a: number, b: number): void;
export function biscuit_createBlock(a: number): number;
export function biscuit_append(a: number, b: number, c: number): number;
export function biscuit_print(a: number, b: number): void;
export function __wbg_verifier_free(a: number): void;
export function verifier_new(): number;
export function verifier_addFact(a: number, b: number): void;
export function verifier_addRule(a: number, b: number): void;
export function verifier_addCaveat(a: number, b: number): void;
export function verifier_addResource(a: number, b: number, c: number): void;
export function verifier_addOperation(a: number, b: number, c: number): void;
export function verifier_setTime(a: number, b: number, c: number): void;
export function verifier_revocationCheck(a: number, b: number, c: number): void;
export function verifier_verify(a: number, b: number, c: number): void;
export function __wbg_atom_free(a: number): void;
export function integer(a: number, b: number): number;
export function string(a: number, b: number): number;
export function symbol(a: number, b: number): number;
export function date(a: number, b: number): number;
export function variable(a: number): number;
export function __wbg_fact_free(a: number): void;
export function fact(a: number, b: number, c: number): number;
export function __wbg_rule_free(a: number): void;
export function rule(a: number, b: number, c: number, d: number): number;
export function constrained_rule(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_biscuitbuilder_free(a: number): void;
export function biscuitbuilder_new(a: number): number;
export function biscuitbuilder_newWithDefaultSymbols(): number;
export function biscuitbuilder_addAuthorityFact(a: number, b: number): void;
export function biscuitbuilder_addAuthorityRule(a: number, b: number): void;
export function biscuitbuilder_addAuthorityCaveat(a: number, b: number): void;
export function biscuitbuilder_addRight(a: number, b: number, c: number, d: number, e: number): void;
export function biscuitbuilder_build(a: number, b: number): number;
export function biscuitbuilder_print(a: number, b: number, c: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_new(): number;
export function keypair_publicKey(a: number): number;
export function keypair_fromBytes(a: number, b: number): number;
export function keypair_toBytes(a: number, b: number, c: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_toBytes(a: number, b: number, c: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
